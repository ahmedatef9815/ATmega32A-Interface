
ADC-Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000a52  00000ae6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080007e  0080007e  00000b04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025e5  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d55  00000000  00000000  000032ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c91  00000000  00000000  00004042  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d0  00000000  00000000  00004cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bf2  00000000  00000000  00004fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c3d  00000000  00000000  00005b96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000067d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 37       	cpi	r26, 0x7F	; 127
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0e 02 	call	0x41c	; 0x41c <main>
  8a:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Send_Instruction>:
			u8LocalLineAddress = col | LCD_4TH_LINE_BASE;
			break;
		default:
			break;
	}
	LCD_Send_Instruction(LCD_DDRAM_CONST | u8LocalLineAddress);
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	61 e0       	ldi	r22, 0x01	; 1
  9a:	88 e3       	ldi	r24, 0x38	; 56
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 38 03 	call	0x670	; 0x670 <Dio_ChannelWrite>
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	88 e3       	ldi	r24, 0x38	; 56
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 38 03 	call	0x670	; 0x670 <Dio_ChannelWrite>
  ae:	8f e9       	ldi	r24, 0x9F	; 159
  b0:	9f e0       	ldi	r25, 0x0F	; 15
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <LCD_Send_Instruction+0x20>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <LCD_Send_Instruction+0x26>
  b8:	00 00       	nop
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	63 e0       	ldi	r22, 0x03	; 3
  be:	88 e3       	ldi	r24, 0x38	; 56
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 38 03 	call	0x670	; 0x670 <Dio_ChannelWrite>
  c6:	8f e9       	ldi	r24, 0x9F	; 159
  c8:	9f e0       	ldi	r25, 0x0F	; 15
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <LCD_Send_Instruction+0x38>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <LCD_Send_Instruction+0x3e>
  d0:	00 00       	nop
  d2:	8b b3       	in	r24, 0x1b	; 27
  d4:	8f 70       	andi	r24, 0x0F	; 15
  d6:	8b bb       	out	0x1b, r24	; 27
  d8:	8b b3       	in	r24, 0x1b	; 27
  da:	9c 2f       	mov	r25, r28
  dc:	90 7f       	andi	r25, 0xF0	; 240
  de:	89 2b       	or	r24, r25
  e0:	8b bb       	out	0x1b, r24	; 27
  e2:	8f e9       	ldi	r24, 0x9F	; 159
  e4:	9f e0       	ldi	r25, 0x0F	; 15
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_Send_Instruction+0x54>
  ea:	00 c0       	rjmp	.+0      	; 0xec <LCD_Send_Instruction+0x5a>
  ec:	00 00       	nop
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	63 e0       	ldi	r22, 0x03	; 3
  f2:	88 e3       	ldi	r24, 0x38	; 56
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 38 03 	call	0x670	; 0x670 <Dio_ChannelWrite>
  fa:	8f e9       	ldi	r24, 0x9F	; 159
  fc:	9f e0       	ldi	r25, 0x0F	; 15
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <LCD_Send_Instruction+0x6c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_Send_Instruction+0x72>
 104:	00 00       	nop
 106:	41 e0       	ldi	r20, 0x01	; 1
 108:	63 e0       	ldi	r22, 0x03	; 3
 10a:	88 e3       	ldi	r24, 0x38	; 56
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 38 03 	call	0x670	; 0x670 <Dio_ChannelWrite>
 112:	8f e9       	ldi	r24, 0x9F	; 159
 114:	9f e0       	ldi	r25, 0x0F	; 15
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_Send_Instruction+0x84>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LCD_Send_Instruction+0x8a>
 11c:	00 00       	nop
 11e:	8b b3       	in	r24, 0x1b	; 27
 120:	8f 70       	andi	r24, 0x0F	; 15
 122:	8b bb       	out	0x1b, r24	; 27
 124:	8b b3       	in	r24, 0x1b	; 27
 126:	c2 95       	swap	r28
 128:	c0 7f       	andi	r28, 0xF0	; 240
 12a:	c8 2b       	or	r28, r24
 12c:	cb bb       	out	0x1b, r28	; 27
 12e:	8f e9       	ldi	r24, 0x9F	; 159
 130:	9f e0       	ldi	r25, 0x0F	; 15
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_Send_Instruction+0xa0>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_Send_Instruction+0xa6>
 138:	00 00       	nop
 13a:	40 e0       	ldi	r20, 0x00	; 0
 13c:	63 e0       	ldi	r22, 0x03	; 3
 13e:	88 e3       	ldi	r24, 0x38	; 56
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 38 03 	call	0x670	; 0x670 <Dio_ChannelWrite>
 146:	8f e9       	ldi	r24, 0x9F	; 159
 148:	9f e0       	ldi	r25, 0x0F	; 15
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_Send_Instruction+0xb8>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_Send_Instruction+0xbe>
 150:	00 00       	nop
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <LCD_Init>:
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	89 ef       	ldi	r24, 0xF9	; 249
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <LCD_Init+0x6>
 164:	00 c0       	rjmp	.+0      	; 0x166 <LCD_Init+0x10>
 166:	00 00       	nop
 168:	41 e0       	ldi	r20, 0x01	; 1
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	87 e3       	ldi	r24, 0x37	; 55
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 05 03 	call	0x60a	; 0x60a <Dio_ChannelDirectionSet>
 174:	41 e0       	ldi	r20, 0x01	; 1
 176:	62 e0       	ldi	r22, 0x02	; 2
 178:	87 e3       	ldi	r24, 0x37	; 55
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 05 03 	call	0x60a	; 0x60a <Dio_ChannelDirectionSet>
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	63 e0       	ldi	r22, 0x03	; 3
 184:	87 e3       	ldi	r24, 0x37	; 55
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 05 03 	call	0x60a	; 0x60a <Dio_ChannelDirectionSet>
 18c:	8a b3       	in	r24, 0x1a	; 26
 18e:	80 6f       	ori	r24, 0xF0	; 240
 190:	8a bb       	out	0x1a, r24	; 26
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Send_Instruction>
 198:	88 e2       	ldi	r24, 0x28	; 40
 19a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Send_Instruction>
 19e:	8c e0       	ldi	r24, 0x0C	; 12
 1a0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Send_Instruction>
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Send_Instruction>
 1aa:	08 95       	ret

000001ac <LCD_Clear>:
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Send_Instruction>
 1b2:	08 95       	ret

000001b4 <LCD_Char_Display>:
}


void LCD_Char_Display(uint8 data)
{
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	c8 2f       	mov	r28, r24
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_RS, DIO_HIGH);
 1ba:	41 e0       	ldi	r20, 0x01	; 1
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	88 e3       	ldi	r24, 0x38	; 56
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 38 03 	call	0x670	; 0x670 <Dio_ChannelWrite>
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_RW, DIO_LOW);
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	62 e0       	ldi	r22, 0x02	; 2
 1ca:	88 e3       	ldi	r24, 0x38	; 56
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 38 03 	call	0x670	; 0x670 <Dio_ChannelWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d2:	8f e9       	ldi	r24, 0x9F	; 159
 1d4:	9f e0       	ldi	r25, 0x0F	; 15
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCD_Char_Display+0x22>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <LCD_Char_Display+0x28>
 1dc:	00 00       	nop
	_delay_ms(1);
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_LOW);
	_delay_ms(1);
	
	#else
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_HIGH);
 1de:	41 e0       	ldi	r20, 0x01	; 1
 1e0:	63 e0       	ldi	r22, 0x03	; 3
 1e2:	88 e3       	ldi	r24, 0x38	; 56
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 38 03 	call	0x670	; 0x670 <Dio_ChannelWrite>
 1ea:	8f e9       	ldi	r24, 0x9F	; 159
 1ec:	9f e0       	ldi	r25, 0x0F	; 15
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_Char_Display+0x3a>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_Char_Display+0x40>
 1f4:	00 00       	nop
	_delay_ms(1);
	*LCD_DATA_OUT_REG = 0x0FU;
 1f6:	df e0       	ldi	r29, 0x0F	; 15
 1f8:	db bb       	out	0x1b, r29	; 27
	*LCD_DATA_OUT_REG |= (data & 0xF0U);
 1fa:	8b b3       	in	r24, 0x1b	; 27
 1fc:	9c 2f       	mov	r25, r28
 1fe:	90 7f       	andi	r25, 0xF0	; 240
 200:	89 2b       	or	r24, r25
 202:	8b bb       	out	0x1b, r24	; 27
 204:	8f e9       	ldi	r24, 0x9F	; 159
 206:	9f e0       	ldi	r25, 0x0F	; 15
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <LCD_Char_Display+0x54>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <LCD_Char_Display+0x5a>
 20e:	00 00       	nop
	_delay_ms(1);
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_LOW);
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	63 e0       	ldi	r22, 0x03	; 3
 214:	88 e3       	ldi	r24, 0x38	; 56
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 38 03 	call	0x670	; 0x670 <Dio_ChannelWrite>
 21c:	8f e9       	ldi	r24, 0x9F	; 159
 21e:	9f e0       	ldi	r25, 0x0F	; 15
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <LCD_Char_Display+0x6c>
 224:	00 c0       	rjmp	.+0      	; 0x226 <LCD_Char_Display+0x72>
 226:	00 00       	nop
	_delay_ms(1);
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_HIGH);
 228:	41 e0       	ldi	r20, 0x01	; 1
 22a:	63 e0       	ldi	r22, 0x03	; 3
 22c:	88 e3       	ldi	r24, 0x38	; 56
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 38 03 	call	0x670	; 0x670 <Dio_ChannelWrite>
 234:	8f e9       	ldi	r24, 0x9F	; 159
 236:	9f e0       	ldi	r25, 0x0F	; 15
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <LCD_Char_Display+0x84>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <LCD_Char_Display+0x8a>
 23e:	00 00       	nop
	_delay_ms(1);
	*LCD_DATA_OUT_REG = 0x0FU;
 240:	db bb       	out	0x1b, r29	; 27
	*LCD_DATA_OUT_REG |= (data << 4) & 0xF0U;
 242:	8b b3       	in	r24, 0x1b	; 27
 244:	c2 95       	swap	r28
 246:	c0 7f       	andi	r28, 0xF0	; 240
 248:	c8 2b       	or	r28, r24
 24a:	cb bb       	out	0x1b, r28	; 27
 24c:	8f e9       	ldi	r24, 0x9F	; 159
 24e:	9f e0       	ldi	r25, 0x0F	; 15
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCD_Char_Display+0x9c>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_Char_Display+0xa2>
 256:	00 00       	nop
	_delay_ms(1);
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_LOW);
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	63 e0       	ldi	r22, 0x03	; 3
 25c:	88 e3       	ldi	r24, 0x38	; 56
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 38 03 	call	0x670	; 0x670 <Dio_ChannelWrite>
 264:	8f e9       	ldi	r24, 0x9F	; 159
 266:	9f e0       	ldi	r25, 0x0F	; 15
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <LCD_Char_Display+0xb4>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <LCD_Char_Display+0xba>
 26e:	00 00       	nop
	_delay_ms(1);
	
	#endif
}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <LCD_String_Display>:


void LCD_String_Display(char* string)
{
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	ec 01       	movw	r28, r24
	while(*string != '\0')
 27c:	03 c0       	rjmp	.+6      	; 0x284 <LCD_String_Display+0xe>
	{
		LCD_Char_Display(*string);
 27e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Char_Display>
		string++;
 282:	21 96       	adiw	r28, 0x01	; 1
}


void LCD_String_Display(char* string)
{
	while(*string != '\0')
 284:	88 81       	ld	r24, Y
 286:	81 11       	cpse	r24, r1
 288:	fa cf       	rjmp	.-12     	; 0x27e <LCD_String_Display+0x8>
	{
		LCD_Char_Display(*string);
		string++;
	}
}
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <LCD_Integer_Display>:


void LCD_Integer_Display(sint32 data)
{
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	61 97       	sbiw	r28, 0x11	; 17
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
 2a4:	dc 01       	movw	r26, r24
 2a6:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2a8:	4a e0       	ldi	r20, 0x0A	; 10
 2aa:	be 01       	movw	r22, r28
 2ac:	6f 5f       	subi	r22, 0xFF	; 255
 2ae:	7f 4f       	sbci	r23, 0xFF	; 255
 2b0:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__itoa_ncheck>
	// String to hold the ascii result
	char u8LocalResult[17];
	itoa(data, u8LocalResult, 10);
	LCD_String_Display(u8LocalResult);
 2b4:	ce 01       	movw	r24, r28
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_String_Display>
}
 2bc:	61 96       	adiw	r28, 0x11	; 17
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	de bf       	out	0x3e, r29	; 62
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	cd bf       	out	0x3d, r28	; 61
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <Pot_Init>:
#include "Potentiometer.h"


void Pot_Init(void)
{
	Adc_Init(&gPotAdc_Configuration);
 2ce:	8c e6       	ldi	r24, 0x6C	; 108
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Adc_Init>
 2d6:	08 95       	ret

000002d8 <Pot_ValueGet>:
}


uint16 Pot_ValueGet(void)
{
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	00 d0       	rcall	.+0      	; 0x2de <Pot_ValueGet+0x6>
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
	Adc_ValueType u16LocalAdcReading = 0U;
 2e2:	1a 82       	std	Y+2, r1	; 0x02
 2e4:	19 82       	std	Y+1, r1	; 0x01
		u16LocalAdcPrecision = ADC_TEN_BIT_PRECISION;
		break;
		default:
		break;
	}*/
	Adc_StartGroupConversion(gPotAdc_Configuration.AdcGroup);
 2e6:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <gPotAdc_Configuration>
 2ea:	0e 94 b7 02 	call	0x56e	; 0x56e <Adc_StartGroupConversion>
	Adc_ReadChannel(&gPotAdc_Configuration, &u16LocalAdcReading);
 2ee:	be 01       	movw	r22, r28
 2f0:	6f 5f       	subi	r22, 0xFF	; 255
 2f2:	7f 4f       	sbci	r23, 0xFF	; 255
 2f4:	8c e6       	ldi	r24, 0x6C	; 108
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 c3 02 	call	0x586	; 0x586 <Adc_ReadChannel>
	// u16LocalAdcResult = ((u16LocalAdcReading*5)/u16LocalAdcPrecision);
	return (u16LocalAdcReading);
}
 2fc:	89 81       	ldd	r24, Y+1	; 0x01
 2fe:	9a 81       	ldd	r25, Y+2	; 0x02
 300:	0f 90       	pop	r0
 302:	0f 90       	pop	r0
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <Pot_Stop_Conversion>:



void Pot_Stop_Conversion(void)
{
	Adc_StopGroupConversion(gPotAdc_Configuration.AdcGroup);
 30a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <gPotAdc_Configuration>
 30e:	0e 94 bd 02 	call	0x57a	; 0x57a <Adc_StopGroupConversion>
 312:	08 95       	ret

00000314 <Switch_Init>:

DioPinStateEnum_t SwitchPreviousState = SW_RELEASED;

void Switch_Init(volatile uint8* sw_reg, SwitchEnum_t sw_no)
{
	Dio_ChannelDirectionSet(sw_reg, sw_no, DIO_INPUT);
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	0e 94 05 03 	call	0x60a	; 0x60a <Dio_ChannelDirectionSet>
 31a:	08 95       	ret

0000031c <Switch_Get_State>:
}


SwitchStateEnum_t Switch_Get_State(volatile uint8* sw_reg, SwitchEnum_t sw_no)
{
 31c:	1f 93       	push	r17
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	ec 01       	movw	r28, r24
 324:	16 2f       	mov	r17, r22
	SwitchStateEnum_t SwitchLocalState = SW_RELEASED;
	if(SwitchPreviousState != Dio_ChannelRead(sw_reg, sw_no))
 326:	0e 94 23 03 	call	0x646	; 0x646 <Dio_ChannelRead>
 32a:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <__data_end>
 32e:	89 17       	cp	r24, r25
 330:	91 f0       	breq	.+36     	; 0x356 <Switch_Get_State+0x3a>
 332:	2f ef       	ldi	r18, 0xFF	; 255
 334:	89 ef       	ldi	r24, 0xF9	; 249
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	21 50       	subi	r18, 0x01	; 1
 33a:	80 40       	sbci	r24, 0x00	; 0
 33c:	90 40       	sbci	r25, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <Switch_Get_State+0x1c>
 340:	00 c0       	rjmp	.+0      	; 0x342 <Switch_Get_State+0x26>
 342:	00 00       	nop
	{
		_delay_ms(DEBOUNCE_PERIOD);
		SwitchPreviousState = Dio_ChannelRead(sw_reg, sw_no);
 344:	61 2f       	mov	r22, r17
 346:	ce 01       	movw	r24, r28
 348:	0e 94 23 03 	call	0x646	; 0x646 <Dio_ChannelRead>
 34c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__data_end>
		if(SwitchPreviousState == DIO_HIGH)
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	19 f4       	brne	.+6      	; 0x35a <Switch_Get_State+0x3e>
 354:	03 c0       	rjmp	.+6      	; 0x35c <Switch_Get_State+0x40>
}


SwitchStateEnum_t Switch_Get_State(volatile uint8* sw_reg, SwitchEnum_t sw_no)
{
	SwitchStateEnum_t SwitchLocalState = SW_RELEASED;
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	01 c0       	rjmp	.+2      	; 0x35c <Switch_Get_State+0x40>
		{
			SwitchLocalState = SW_PRESSED;
		}
		else 
		{
			SwitchLocalState = SW_RELEASED;
 35a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return SwitchLocalState;
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
 362:	08 95       	ret

00000364 <TempSensor_Init>:
#include "TempSensor.h"


void TempSensor_Init(void)
{
	Adc_Init(&gTempAdc_Configuration);
 364:	85 e7       	ldi	r24, 0x75	; 117
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Adc_Init>
 36c:	08 95       	ret

0000036e <TempSensor_ValueGet>:
}


uint8 TempSensor_ValueGet(void)
{
 36e:	cf 92       	push	r12
 370:	df 92       	push	r13
 372:	ef 92       	push	r14
 374:	ff 92       	push	r15
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	00 d0       	rcall	.+0      	; 0x380 <TempSensor_ValueGet+0x12>
 380:	cd b7       	in	r28, 0x3d	; 61
 382:	de b7       	in	r29, 0x3e	; 62
	Adc_ValueType u16LocalAdcReading = 0U;
 384:	1a 82       	std	Y+2, r1	; 0x02
 386:	19 82       	std	Y+1, r1	; 0x01
	uint16 u16LocalAdcPrecision = 0U;
	uint8 u8LocalTemp = 0U;
	Adc_StartGroupConversion(ADC_GROUP_0);
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 b7 02 	call	0x56e	; 0x56e <Adc_StartGroupConversion>
	Adc_ReadChannel(&gTempAdc_Configuration, &u16LocalAdcReading);
 38e:	be 01       	movw	r22, r28
 390:	6f 5f       	subi	r22, 0xFF	; 255
 392:	7f 4f       	sbci	r23, 0xFF	; 255
 394:	85 e7       	ldi	r24, 0x75	; 117
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 c3 02 	call	0x586	; 0x586 <Adc_ReadChannel>
	switch(gTempAdc_Configuration.Resolution)
 39c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gTempAdc_Configuration+0x4>
 3a0:	88 23       	and	r24, r24
 3a2:	41 f0       	breq	.+16     	; 0x3b4 <TempSensor_ValueGet+0x46>
 3a4:	81 30       	cpi	r24, 0x01	; 1
 3a6:	19 f0       	breq	.+6      	; 0x3ae <TempSensor_ValueGet+0x40>


uint8 TempSensor_ValueGet(void)
{
	Adc_ValueType u16LocalAdcReading = 0U;
	uint16 u16LocalAdcPrecision = 0U;
 3a8:	00 e0       	ldi	r16, 0x00	; 0
 3aa:	10 e0       	ldi	r17, 0x00	; 0
 3ac:	05 c0       	rjmp	.+10     	; 0x3b8 <TempSensor_ValueGet+0x4a>
	{
		case ADC_EIGHT_BIT:
			u16LocalAdcPrecision = ADC_EIGHT_BIT_PRECISION;
			break;
		case ADC_TEN_BIT:
			u16LocalAdcPrecision = ADC_TEN_BIT_PRECISION;
 3ae:	0f ef       	ldi	r16, 0xFF	; 255
 3b0:	13 e0       	ldi	r17, 0x03	; 3
			break;
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <TempSensor_ValueGet+0x4a>
	Adc_StartGroupConversion(ADC_GROUP_0);
	Adc_ReadChannel(&gTempAdc_Configuration, &u16LocalAdcReading);
	switch(gTempAdc_Configuration.Resolution)
	{
		case ADC_EIGHT_BIT:
			u16LocalAdcPrecision = ADC_EIGHT_BIT_PRECISION;
 3b4:	0f ef       	ldi	r16, 0xFF	; 255
 3b6:	10 e0       	ldi	r17, 0x00	; 0
			break;
		default:
			break;
	}
	// Temperature Sensor equation
	u8LocalTemp = (((u16LocalAdcReading * ADC_5_V_REF * 100) / u16LocalAdcPrecision)); 
 3b8:	69 81       	ldd	r22, Y+1	; 0x01
 3ba:	7a 81       	ldd	r23, Y+2	; 0x02
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__floatunsisf>
 3c4:	20 e0       	ldi	r18, 0x00	; 0
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	40 ea       	ldi	r20, 0xA0	; 160
 3ca:	50 e4       	ldi	r21, 0x40	; 64
 3cc:	0e 94 85 04 	call	0x90a	; 0x90a <__mulsf3>
 3d0:	20 e0       	ldi	r18, 0x00	; 0
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	48 ec       	ldi	r20, 0xC8	; 200
 3d6:	52 e4       	ldi	r21, 0x42	; 66
 3d8:	0e 94 85 04 	call	0x90a	; 0x90a <__mulsf3>
 3dc:	6b 01       	movw	r12, r22
 3de:	7c 01       	movw	r14, r24
 3e0:	b8 01       	movw	r22, r16
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__floatunsisf>
 3ea:	9b 01       	movw	r18, r22
 3ec:	ac 01       	movw	r20, r24
 3ee:	c7 01       	movw	r24, r14
 3f0:	b6 01       	movw	r22, r12
 3f2:	0e 94 56 03 	call	0x6ac	; 0x6ac <__divsf3>
 3f6:	0e 94 c8 03 	call	0x790	; 0x790 <__fixunssfsi>
 3fa:	86 2f       	mov	r24, r22
	return (u8LocalTemp);
}
 3fc:	0f 90       	pop	r0
 3fe:	0f 90       	pop	r0
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	1f 91       	pop	r17
 406:	0f 91       	pop	r16
 408:	ff 90       	pop	r15
 40a:	ef 90       	pop	r14
 40c:	df 90       	pop	r13
 40e:	cf 90       	pop	r12
 410:	08 95       	ret

00000412 <TempSensor_Stop_Conversion>:



void TempSensor_Stop_Conversion(void)
{
	Adc_StopGroupConversion(gTempAdc_Configuration.AdcGroup);
 412:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <gTempAdc_Configuration>
 416:	0e 94 bd 02 	call	0x57a	; 0x57a <Adc_StopGroupConversion>
 41a:	08 95       	ret

0000041c <main>:
#include "SW.h"


int main(void)
{
	Pot_Init();
 41c:	0e 94 67 01 	call	0x2ce	; 0x2ce <Pot_Init>
	TempSensor_Init();
 420:	0e 94 b2 01 	call	0x364	; 0x364 <TempSensor_Init>
	LCD_Init();
 424:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_Init>
	Switch_Init(SW0_DIR_REG, SW_0);
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	87 e3       	ldi	r24, 0x37	; 55
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 8a 01 	call	0x314	; 0x314 <Switch_Init>
	Switch_Init(SW1_DIR_REG, SW_1);
 432:	66 e0       	ldi	r22, 0x06	; 6
 434:	81 e3       	ldi	r24, 0x31	; 49
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 8a 01 	call	0x314	; 0x314 <Switch_Init>
	uint8 u8TempReading = 0;
	uint16 u16PotReading = 0;
	while(1)
	{
		if(Switch_Get_State(SW0_INP_REG, SW_0))
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	86 e3       	ldi	r24, 0x36	; 54
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 8e 01 	call	0x31c	; 0x31c <Switch_Get_State>
 446:	88 23       	and	r24, r24
 448:	19 f1       	breq	.+70     	; 0x490 <main+0x74>
		{
			while (1)
			{
				u8TempReading = TempSensor_ValueGet();
 44a:	0e 94 b7 01 	call	0x36e	; 0x36e <TempSensor_ValueGet>
 44e:	c8 2f       	mov	r28, r24
				LCD_Clear();
 450:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Clear>
				LCD_Integer_Display(u8TempReading);
 454:	6c 2f       	mov	r22, r28
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 48 01 	call	0x290	; 0x290 <LCD_Integer_Display>
				LCD_String_Display("Celsius");
 460:	80 e6       	ldi	r24, 0x60	; 96
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_String_Display>
 468:	2f ef       	ldi	r18, 0xFF	; 255
 46a:	89 e6       	ldi	r24, 0x69	; 105
 46c:	98 e1       	ldi	r25, 0x18	; 24
 46e:	21 50       	subi	r18, 0x01	; 1
 470:	80 40       	sbci	r24, 0x00	; 0
 472:	90 40       	sbci	r25, 0x00	; 0
 474:	e1 f7       	brne	.-8      	; 0x46e <main+0x52>
 476:	00 c0       	rjmp	.+0      	; 0x478 <main+0x5c>
 478:	00 00       	nop
				_delay_ms(500);
				if(Switch_Get_State(SW1_INP_REG, SW_1))
 47a:	66 e0       	ldi	r22, 0x06	; 6
 47c:	80 e3       	ldi	r24, 0x30	; 48
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 8e 01 	call	0x31c	; 0x31c <Switch_Get_State>
 484:	88 23       	and	r24, r24
 486:	09 f3       	breq	.-62     	; 0x44a <main+0x2e>
				{
					TempSensor_Stop_Conversion();
 488:	0e 94 09 02 	call	0x412	; 0x412 <TempSensor_Stop_Conversion>
					LCD_Clear();
 48c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Clear>
					break;
				}
			}
		}
		
		if(Switch_Get_State(SW1_INP_REG, SW_1))
 490:	66 e0       	ldi	r22, 0x06	; 6
 492:	80 e3       	ldi	r24, 0x30	; 48
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 8e 01 	call	0x31c	; 0x31c <Switch_Get_State>
 49a:	88 23       	and	r24, r24
 49c:	79 f2       	breq	.-98     	; 0x43c <main+0x20>
		{
			while (1)
			{
				u16PotReading = Pot_ValueGet();
 49e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Pot_ValueGet>
 4a2:	ec 01       	movw	r28, r24
				LCD_Clear();
 4a4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Clear>
				LCD_Integer_Display(u16PotReading);
 4a8:	be 01       	movw	r22, r28
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 48 01 	call	0x290	; 0x290 <LCD_Integer_Display>
				LCD_String_Display("Ohm");
 4b2:	88 e6       	ldi	r24, 0x68	; 104
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_String_Display>
 4ba:	2f ef       	ldi	r18, 0xFF	; 255
 4bc:	89 e6       	ldi	r24, 0x69	; 105
 4be:	98 e1       	ldi	r25, 0x18	; 24
 4c0:	21 50       	subi	r18, 0x01	; 1
 4c2:	80 40       	sbci	r24, 0x00	; 0
 4c4:	90 40       	sbci	r25, 0x00	; 0
 4c6:	e1 f7       	brne	.-8      	; 0x4c0 <main+0xa4>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <main+0xae>
 4ca:	00 00       	nop
				_delay_ms(500);
				if (Switch_Get_State(SW0_INP_REG, SW_0))
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	86 e3       	ldi	r24, 0x36	; 54
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 8e 01 	call	0x31c	; 0x31c <Switch_Get_State>
 4d6:	88 23       	and	r24, r24
 4d8:	11 f3       	breq	.-60     	; 0x49e <main+0x82>
				{
					Pot_Stop_Conversion();
 4da:	0e 94 85 01 	call	0x30a	; 0x30a <Pot_Stop_Conversion>
					LCD_Clear();
 4de:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Clear>
					break;
 4e2:	ac cf       	rjmp	.-168    	; 0x43c <main+0x20>

000004e4 <Adc_ConvStateGet>:


static Adc_StatusType Adc_ConvStateGet(void)
{
	Adc_StatusType eLocalAdcState = ADC_BUSY;
	if(READ_BIT(*ADC_CTRL_STATUS_REG_A, ADC_INTERRUPT_FLAG_BIT))
 4e4:	34 99       	sbic	0x06, 4	; 6
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <Adc_ConvStateGet+0x8>
}


static Adc_StatusType Adc_ConvStateGet(void)
{
	Adc_StatusType eLocalAdcState = ADC_BUSY;
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	08 95       	ret
	if(READ_BIT(*ADC_CTRL_STATUS_REG_A, ADC_INTERRUPT_FLAG_BIT))
	{
		eLocalAdcState = ADC_COMPLETED;
 4ec:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		// Do Nothing
	}
	return (eLocalAdcState);
 4ee:	08 95       	ret

000004f0 <Adc_Init>:

/*******************************************************************************
 *                      Functions Definitions                                   *
 *******************************************************************************/
void Adc_Init(const Adc_ConfigType *ConfigPtr)
{
 4f0:	fc 01       	movw	r30, r24
	// Clear the ADC Registers before applying the configuration
	*ADC_MUX_REG = 0x00U;
 4f2:	17 b8       	out	0x07, r1	; 7
	*ADC_CTRL_STATUS_REG_A = 0x00U;
 4f4:	16 b8       	out	0x06, r1	; 6
	*ADC_SPECIAL_FUNC_IO_REG &= 0x1FU;
 4f6:	80 b7       	in	r24, 0x30	; 48
 4f8:	8f 71       	andi	r24, 0x1F	; 31
 4fa:	80 bf       	out	0x30, r24	; 48
	
	// Apply the configuration of the desired ADC Group
	switch(ConfigPtr->AdcGroup)
 4fc:	80 81       	ld	r24, Z
 4fe:	81 11       	cpse	r24, r1
 500:	32 c0       	rjmp	.+100    	; 0x566 <Adc_Init+0x76>
	{
		case ADC_GROUP_0:
			// Set the Conversion mode/Trigger Source of the ADC Group
			switch (ConfigPtr->ConvMode)
 502:	82 81       	ldd	r24, Z+2	; 0x02
 504:	81 30       	cpi	r24, 0x01	; 1
 506:	21 f0       	breq	.+8      	; 0x510 <Adc_Init+0x20>
 508:	38 f0       	brcs	.+14     	; 0x518 <Adc_Init+0x28>
 50a:	82 30       	cpi	r24, 0x02	; 2
 50c:	59 f0       	breq	.+22     	; 0x524 <Adc_Init+0x34>
 50e:	11 c0       	rjmp	.+34     	; 0x532 <Adc_Init+0x42>
			{
				case ADC_CONV_MODE_ONESHOT:
					CLEAR_BIT(*ADC_CTRL_STATUS_REG_A, ADC_AUTO_TRIGGER_ENABLE_BIT);
 510:	86 b1       	in	r24, 0x06	; 6
 512:	8f 7d       	andi	r24, 0xDF	; 223
 514:	86 b9       	out	0x06, r24	; 6
					break;
 516:	0d c0       	rjmp	.+26     	; 0x532 <Adc_Init+0x42>
				case ADC_CONV_MODE_CONTINUOUS:
					SET_BIT(*ADC_CTRL_STATUS_REG_A, ADC_AUTO_TRIGGER_ENABLE_BIT);
 518:	86 b1       	in	r24, 0x06	; 6
 51a:	80 62       	ori	r24, 0x20	; 32
 51c:	86 b9       	out	0x06, r24	; 6
					*ADC_SPECIAL_FUNC_IO_REG |= ADC_CONV_MODE_CONTINUOUS;
 51e:	80 b7       	in	r24, 0x30	; 48
 520:	80 bf       	out	0x30, r24	; 48
					break;
 522:	07 c0       	rjmp	.+14     	; 0x532 <Adc_Init+0x42>
				case ADC_CONV_MODE_TRIGGER:
					SET_BIT(*ADC_CTRL_STATUS_REG_A, ADC_AUTO_TRIGGER_ENABLE_BIT);
 524:	86 b1       	in	r24, 0x06	; 6
 526:	80 62       	ori	r24, 0x20	; 32
 528:	86 b9       	out	0x06, r24	; 6
					*ADC_SPECIAL_FUNC_IO_REG |= (ConfigPtr->TriggerSource);
 52a:	90 b7       	in	r25, 0x30	; 48
 52c:	85 81       	ldd	r24, Z+5	; 0x05
 52e:	89 2b       	or	r24, r25
 530:	80 bf       	out	0x30, r24	; 48
				default:
					break;
			}
			
			// Set the voltage reference for the ADC Group
			*ADC_MUX_REG |= ConfigPtr->VoltRef;
 532:	97 b1       	in	r25, 0x07	; 7
 534:	81 81       	ldd	r24, Z+1	; 0x01
 536:	89 2b       	or	r24, r25
 538:	87 b9       	out	0x07, r24	; 7
			
			// Check the ADC Resolution, and in order to Work with 8-Bit Precision The Data Must Be Left Adjusted
			switch (ConfigPtr->Resolution)
 53a:	84 81       	ldd	r24, Z+4	; 0x04
 53c:	88 23       	and	r24, r24
 53e:	19 f0       	breq	.+6      	; 0x546 <Adc_Init+0x56>
 540:	81 30       	cpi	r24, 0x01	; 1
 542:	29 f0       	breq	.+10     	; 0x54e <Adc_Init+0x5e>
 544:	08 c0       	rjmp	.+16     	; 0x556 <Adc_Init+0x66>
			{
				case ADC_EIGHT_BIT:
					// Align the result left
					*ADC_MUX_REG |= ADC_ALIGN_LEFT;
 546:	87 b1       	in	r24, 0x07	; 7
 548:	80 62       	ori	r24, 0x20	; 32
 54a:	87 b9       	out	0x07, r24	; 7
					break;
 54c:	04 c0       	rjmp	.+8      	; 0x556 <Adc_Init+0x66>
				case ADC_TEN_BIT:
					// Align the result as Configured
					*ADC_MUX_REG |= ConfigPtr->ResultAlignment;
 54e:	97 b1       	in	r25, 0x07	; 7
 550:	86 81       	ldd	r24, Z+6	; 0x06
 552:	89 2b       	or	r24, r25
 554:	87 b9       	out	0x07, r24	; 7
				default:
					break;
			}
			
			// Set the Clock division and Interrupt state for the ADC Group	
			*ADC_CTRL_STATUS_REG_A |= ConfigPtr->AdcPrescale;
 556:	96 b1       	in	r25, 0x06	; 6
 558:	83 81       	ldd	r24, Z+3	; 0x03
 55a:	89 2b       	or	r24, r25
 55c:	86 b9       	out	0x06, r24	; 6
			*ADC_CTRL_STATUS_REG_A |= ConfigPtr->IntState;
 55e:	96 b1       	in	r25, 0x06	; 6
 560:	87 81       	ldd	r24, Z+7	; 0x07
 562:	89 2b       	or	r24, r25
 564:	86 b9       	out	0x06, r24	; 6
			break;
		default:
			break;
	}
	// Enable ADC unit by setting the ADEN bit
	SET_BIT(*ADC_CTRL_STATUS_REG_A, ADC_ENABLE_BIT);
 566:	86 b1       	in	r24, 0x06	; 6
 568:	80 68       	ori	r24, 0x80	; 128
 56a:	86 b9       	out	0x06, r24	; 6
 56c:	08 95       	ret

0000056e <Adc_StartGroupConversion>:


void Adc_StartGroupConversion(Adc_GroupType Group)
{
	// Start conversion of the specified ADC Group
	switch(Group)
 56e:	81 11       	cpse	r24, r1
 570:	03 c0       	rjmp	.+6      	; 0x578 <Adc_StartGroupConversion+0xa>
	{
		case ADC_GROUP_0:
			SET_BIT(*ADC_CTRL_STATUS_REG_A, ADC_START_CONVERSION_BIT);
 572:	86 b1       	in	r24, 0x06	; 6
 574:	80 64       	ori	r24, 0x40	; 64
 576:	86 b9       	out	0x06, r24	; 6
 578:	08 95       	ret

0000057a <Adc_StopGroupConversion>:


void Adc_StopGroupConversion(Adc_GroupType Group)
{
	// Stop conversion of the specified ADC Group
	switch(Group)
 57a:	81 11       	cpse	r24, r1
 57c:	03 c0       	rjmp	.+6      	; 0x584 <Adc_StopGroupConversion+0xa>
	{
		case ADC_GROUP_0:
			CLEAR_BIT(*ADC_CTRL_STATUS_REG_A, ADC_START_CONVERSION_BIT);
 57e:	86 b1       	in	r24, 0x06	; 6
 580:	8f 7b       	andi	r24, 0xBF	; 191
 582:	86 b9       	out	0x06, r24	; 6
 584:	08 95       	ret

00000586 <Adc_ReadChannel>:
	}
}


void Adc_ReadChannel(const Adc_ConfigType *ConfigPtr, Adc_ValueType *DataBufferPtr)
{
 586:	0f 93       	push	r16
 588:	1f 93       	push	r17
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
	switch(ConfigPtr->AdcGroup)
 58e:	fc 01       	movw	r30, r24
 590:	20 81       	ld	r18, Z
 592:	21 11       	cpse	r18, r1
 594:	32 c0       	rjmp	.+100    	; 0x5fa <Adc_ReadChannel+0x74>
 596:	8b 01       	movw	r16, r22
 598:	ec 01       	movw	r28, r24
	{
		case ADC_GROUP_0:
			// Clear the channel selection bits in the ADMUX register 
			*ADC_MUX_REG &= 0xE0U;
 59a:	87 b1       	in	r24, 0x07	; 7
 59c:	80 7e       	andi	r24, 0xE0	; 224
 59e:	87 b9       	out	0x07, r24	; 7
			// Select the required channel to read the result from it 
			*ADC_MUX_REG |= ConfigPtr->ChannelNumber;
 5a0:	97 b1       	in	r25, 0x07	; 7
 5a2:	80 85       	ldd	r24, Z+8	; 0x08
 5a4:	89 2b       	or	r24, r25
 5a6:	87 b9       	out	0x07, r24	; 7
		
			while(Adc_ConvStateGet() == ADC_BUSY )
 5a8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Adc_ConvStateGet>
 5ac:	81 30       	cpi	r24, 0x01	; 1
 5ae:	e1 f3       	breq	.-8      	; 0x5a8 <Adc_ReadChannel+0x22>
			{
				/* Do Nothing */
			}
		
			switch(ConfigPtr->Resolution)
 5b0:	8c 81       	ldd	r24, Y+4	; 0x04
 5b2:	88 23       	and	r24, r24
 5b4:	19 f0       	breq	.+6      	; 0x5bc <Adc_ReadChannel+0x36>
 5b6:	81 30       	cpi	r24, 0x01	; 1
 5b8:	39 f0       	breq	.+14     	; 0x5c8 <Adc_ReadChannel+0x42>
 5ba:	1f c0       	rjmp	.+62     	; 0x5fa <Adc_ReadChannel+0x74>
			{
				case ADC_EIGHT_BIT:
					*DataBufferPtr = *ADC_DATA_HIGH_REG;
 5bc:	85 b1       	in	r24, 0x05	; 5
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	f8 01       	movw	r30, r16
 5c2:	91 83       	std	Z+1, r25	; 0x01
 5c4:	80 83       	st	Z, r24
					break;
 5c6:	19 c0       	rjmp	.+50     	; 0x5fa <Adc_ReadChannel+0x74>
				case ADC_TEN_BIT:
					switch(ConfigPtr->ResultAlignment)
 5c8:	8e 81       	ldd	r24, Y+6	; 0x06
 5ca:	88 23       	and	r24, r24
 5cc:	89 f0       	breq	.+34     	; 0x5f0 <Adc_ReadChannel+0x6a>
 5ce:	80 32       	cpi	r24, 0x20	; 32
 5d0:	a1 f4       	brne	.+40     	; 0x5fa <Adc_ReadChannel+0x74>
					{
						case ADC_ALIGN_LEFT:
							*DataBufferPtr = (uint16)((*(uint16*)ADC_DATA_LOW_REG>>6U));
 5d2:	84 b1       	in	r24, 0x04	; 4
 5d4:	95 b1       	in	r25, 0x05	; 5
 5d6:	00 24       	eor	r0, r0
 5d8:	88 0f       	add	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	00 1c       	adc	r0, r0
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	00 1c       	adc	r0, r0
 5e4:	89 2f       	mov	r24, r25
 5e6:	90 2d       	mov	r25, r0
 5e8:	f8 01       	movw	r30, r16
 5ea:	91 83       	std	Z+1, r25	; 0x01
 5ec:	80 83       	st	Z, r24
							break;
 5ee:	05 c0       	rjmp	.+10     	; 0x5fa <Adc_ReadChannel+0x74>
						case ADC_ALIGN_RIGHT:
							*DataBufferPtr = *(uint16*)ADC_DATA_LOW_REG;
 5f0:	84 b1       	in	r24, 0x04	; 4
 5f2:	95 b1       	in	r25, 0x05	; 5
 5f4:	f8 01       	movw	r30, r16
 5f6:	91 83       	std	Z+1, r25	; 0x01
 5f8:	80 83       	st	Z, r24
				break;
			default:
				break;
	}
	// Interrupt flag cleared by putting logic one on it 
	SET_BIT(*ADC_CTRL_STATUS_REG_A, ADC_INTERRUPT_FLAG_BIT);
 5fa:	86 b1       	in	r24, 0x06	; 6
 5fc:	80 61       	ori	r24, 0x10	; 16
 5fe:	86 b9       	out	0x06, r24	; 6
}
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	1f 91       	pop	r17
 606:	0f 91       	pop	r16
 608:	08 95       	ret

0000060a <Dio_ChannelDirectionSet>:
#include "ATmega32A_Configuration.h"

void Dio_ChannelDirectionSet(volatile uint8* port_reg, DioPinEnum_t channel, DioPinDirectionEnum_t direction)
{

	switch(direction)
 60a:	44 23       	and	r20, r20
 60c:	19 f0       	breq	.+6      	; 0x614 <Dio_ChannelDirectionSet+0xa>
 60e:	41 30       	cpi	r20, 0x01	; 1
 610:	71 f0       	breq	.+28     	; 0x62e <Dio_ChannelDirectionSet+0x24>
 612:	08 95       	ret
	{
		case DIO_INPUT:
			CLEAR_BIT(*port_reg, channel);
 614:	fc 01       	movw	r30, r24
 616:	40 81       	ld	r20, Z
 618:	21 e0       	ldi	r18, 0x01	; 1
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	02 c0       	rjmp	.+4      	; 0x622 <Dio_ChannelDirectionSet+0x18>
 61e:	22 0f       	add	r18, r18
 620:	33 1f       	adc	r19, r19
 622:	6a 95       	dec	r22
 624:	e2 f7       	brpl	.-8      	; 0x61e <Dio_ChannelDirectionSet+0x14>
 626:	20 95       	com	r18
 628:	24 23       	and	r18, r20
 62a:	20 83       	st	Z, r18
			break;
 62c:	08 95       	ret
		case DIO_OUTPUT:
			SET_BIT(*port_reg, channel);
 62e:	fc 01       	movw	r30, r24
 630:	40 81       	ld	r20, Z
 632:	21 e0       	ldi	r18, 0x01	; 1
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	02 c0       	rjmp	.+4      	; 0x63c <Dio_ChannelDirectionSet+0x32>
 638:	22 0f       	add	r18, r18
 63a:	33 1f       	adc	r19, r19
 63c:	6a 95       	dec	r22
 63e:	e2 f7       	brpl	.-8      	; 0x638 <Dio_ChannelDirectionSet+0x2e>
 640:	24 2b       	or	r18, r20
 642:	20 83       	st	Z, r18
 644:	08 95       	ret

00000646 <Dio_ChannelRead>:
}


DioPinStateEnum_t Dio_ChannelRead(volatile uint8* port_reg, DioPinEnum_t channel)
{
	DioPinStateEnum_t u8LocalPinValue = READ_BIT(*port_reg, channel);
 646:	fc 01       	movw	r30, r24
 648:	40 81       	ld	r20, Z
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	9c 01       	movw	r18, r24
 650:	06 2e       	mov	r0, r22
 652:	02 c0       	rjmp	.+4      	; 0x658 <Dio_ChannelRead+0x12>
 654:	22 0f       	add	r18, r18
 656:	33 1f       	adc	r19, r19
 658:	0a 94       	dec	r0
 65a:	e2 f7       	brpl	.-8      	; 0x654 <Dio_ChannelRead+0xe>
 65c:	84 2f       	mov	r24, r20
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	82 23       	and	r24, r18
 662:	93 23       	and	r25, r19
 664:	02 c0       	rjmp	.+4      	; 0x66a <Dio_ChannelRead+0x24>
 666:	96 95       	lsr	r25
 668:	87 95       	ror	r24
 66a:	6a 95       	dec	r22
 66c:	e2 f7       	brpl	.-8      	; 0x666 <Dio_ChannelRead+0x20>
	return (u8LocalPinValue);
}
 66e:	08 95       	ret

00000670 <Dio_ChannelWrite>:


void Dio_ChannelWrite(volatile uint8* port_reg, DioPinEnum_t channel, DioPinStateEnum_t state)
{
	switch(state)
 670:	44 23       	and	r20, r20
 672:	19 f0       	breq	.+6      	; 0x67a <Dio_ChannelWrite+0xa>
 674:	41 30       	cpi	r20, 0x01	; 1
 676:	71 f0       	breq	.+28     	; 0x694 <Dio_ChannelWrite+0x24>
 678:	08 95       	ret
	{
		case DIO_LOW:
			CLEAR_BIT(*port_reg, channel);
 67a:	fc 01       	movw	r30, r24
 67c:	40 81       	ld	r20, Z
 67e:	21 e0       	ldi	r18, 0x01	; 1
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	02 c0       	rjmp	.+4      	; 0x688 <Dio_ChannelWrite+0x18>
 684:	22 0f       	add	r18, r18
 686:	33 1f       	adc	r19, r19
 688:	6a 95       	dec	r22
 68a:	e2 f7       	brpl	.-8      	; 0x684 <Dio_ChannelWrite+0x14>
 68c:	20 95       	com	r18
 68e:	24 23       	and	r18, r20
 690:	20 83       	st	Z, r18
			break;
 692:	08 95       	ret
		case DIO_HIGH:
			SET_BIT(*port_reg, channel);
 694:	fc 01       	movw	r30, r24
 696:	40 81       	ld	r20, Z
 698:	21 e0       	ldi	r18, 0x01	; 1
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <Dio_ChannelWrite+0x32>
 69e:	22 0f       	add	r18, r18
 6a0:	33 1f       	adc	r19, r19
 6a2:	6a 95       	dec	r22
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <Dio_ChannelWrite+0x2e>
 6a6:	24 2b       	or	r18, r20
 6a8:	20 83       	st	Z, r18
 6aa:	08 95       	ret

000006ac <__divsf3>:
 6ac:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__divsf3x>
 6b0:	0c 94 4b 04 	jmp	0x896	; 0x896 <__fp_round>
 6b4:	0e 94 44 04 	call	0x888	; 0x888 <__fp_pscB>
 6b8:	58 f0       	brcs	.+22     	; 0x6d0 <__divsf3+0x24>
 6ba:	0e 94 3d 04 	call	0x87a	; 0x87a <__fp_pscA>
 6be:	40 f0       	brcs	.+16     	; 0x6d0 <__divsf3+0x24>
 6c0:	29 f4       	brne	.+10     	; 0x6cc <__divsf3+0x20>
 6c2:	5f 3f       	cpi	r21, 0xFF	; 255
 6c4:	29 f0       	breq	.+10     	; 0x6d0 <__divsf3+0x24>
 6c6:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_inf>
 6ca:	51 11       	cpse	r21, r1
 6cc:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <__fp_szero>
 6d0:	0c 94 3a 04 	jmp	0x874	; 0x874 <__fp_nan>

000006d4 <__divsf3x>:
 6d4:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__fp_split3>
 6d8:	68 f3       	brcs	.-38     	; 0x6b4 <__divsf3+0x8>

000006da <__divsf3_pse>:
 6da:	99 23       	and	r25, r25
 6dc:	b1 f3       	breq	.-20     	; 0x6ca <__divsf3+0x1e>
 6de:	55 23       	and	r21, r21
 6e0:	91 f3       	breq	.-28     	; 0x6c6 <__divsf3+0x1a>
 6e2:	95 1b       	sub	r25, r21
 6e4:	55 0b       	sbc	r21, r21
 6e6:	bb 27       	eor	r27, r27
 6e8:	aa 27       	eor	r26, r26
 6ea:	62 17       	cp	r22, r18
 6ec:	73 07       	cpc	r23, r19
 6ee:	84 07       	cpc	r24, r20
 6f0:	38 f0       	brcs	.+14     	; 0x700 <__divsf3_pse+0x26>
 6f2:	9f 5f       	subi	r25, 0xFF	; 255
 6f4:	5f 4f       	sbci	r21, 0xFF	; 255
 6f6:	22 0f       	add	r18, r18
 6f8:	33 1f       	adc	r19, r19
 6fa:	44 1f       	adc	r20, r20
 6fc:	aa 1f       	adc	r26, r26
 6fe:	a9 f3       	breq	.-22     	; 0x6ea <__divsf3_pse+0x10>
 700:	35 d0       	rcall	.+106    	; 0x76c <__divsf3_pse+0x92>
 702:	0e 2e       	mov	r0, r30
 704:	3a f0       	brmi	.+14     	; 0x714 <__divsf3_pse+0x3a>
 706:	e0 e8       	ldi	r30, 0x80	; 128
 708:	32 d0       	rcall	.+100    	; 0x76e <__divsf3_pse+0x94>
 70a:	91 50       	subi	r25, 0x01	; 1
 70c:	50 40       	sbci	r21, 0x00	; 0
 70e:	e6 95       	lsr	r30
 710:	00 1c       	adc	r0, r0
 712:	ca f7       	brpl	.-14     	; 0x706 <__divsf3_pse+0x2c>
 714:	2b d0       	rcall	.+86     	; 0x76c <__divsf3_pse+0x92>
 716:	fe 2f       	mov	r31, r30
 718:	29 d0       	rcall	.+82     	; 0x76c <__divsf3_pse+0x92>
 71a:	66 0f       	add	r22, r22
 71c:	77 1f       	adc	r23, r23
 71e:	88 1f       	adc	r24, r24
 720:	bb 1f       	adc	r27, r27
 722:	26 17       	cp	r18, r22
 724:	37 07       	cpc	r19, r23
 726:	48 07       	cpc	r20, r24
 728:	ab 07       	cpc	r26, r27
 72a:	b0 e8       	ldi	r27, 0x80	; 128
 72c:	09 f0       	breq	.+2      	; 0x730 <__divsf3_pse+0x56>
 72e:	bb 0b       	sbc	r27, r27
 730:	80 2d       	mov	r24, r0
 732:	bf 01       	movw	r22, r30
 734:	ff 27       	eor	r31, r31
 736:	93 58       	subi	r25, 0x83	; 131
 738:	5f 4f       	sbci	r21, 0xFF	; 255
 73a:	3a f0       	brmi	.+14     	; 0x74a <__divsf3_pse+0x70>
 73c:	9e 3f       	cpi	r25, 0xFE	; 254
 73e:	51 05       	cpc	r21, r1
 740:	78 f0       	brcs	.+30     	; 0x760 <__divsf3_pse+0x86>
 742:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_inf>
 746:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <__fp_szero>
 74a:	5f 3f       	cpi	r21, 0xFF	; 255
 74c:	e4 f3       	brlt	.-8      	; 0x746 <__divsf3_pse+0x6c>
 74e:	98 3e       	cpi	r25, 0xE8	; 232
 750:	d4 f3       	brlt	.-12     	; 0x746 <__divsf3_pse+0x6c>
 752:	86 95       	lsr	r24
 754:	77 95       	ror	r23
 756:	67 95       	ror	r22
 758:	b7 95       	ror	r27
 75a:	f7 95       	ror	r31
 75c:	9f 5f       	subi	r25, 0xFF	; 255
 75e:	c9 f7       	brne	.-14     	; 0x752 <__divsf3_pse+0x78>
 760:	88 0f       	add	r24, r24
 762:	91 1d       	adc	r25, r1
 764:	96 95       	lsr	r25
 766:	87 95       	ror	r24
 768:	97 f9       	bld	r25, 7
 76a:	08 95       	ret
 76c:	e1 e0       	ldi	r30, 0x01	; 1
 76e:	66 0f       	add	r22, r22
 770:	77 1f       	adc	r23, r23
 772:	88 1f       	adc	r24, r24
 774:	bb 1f       	adc	r27, r27
 776:	62 17       	cp	r22, r18
 778:	73 07       	cpc	r23, r19
 77a:	84 07       	cpc	r24, r20
 77c:	ba 07       	cpc	r27, r26
 77e:	20 f0       	brcs	.+8      	; 0x788 <__divsf3_pse+0xae>
 780:	62 1b       	sub	r22, r18
 782:	73 0b       	sbc	r23, r19
 784:	84 0b       	sbc	r24, r20
 786:	ba 0b       	sbc	r27, r26
 788:	ee 1f       	adc	r30, r30
 78a:	88 f7       	brcc	.-30     	; 0x76e <__divsf3_pse+0x94>
 78c:	e0 95       	com	r30
 78e:	08 95       	ret

00000790 <__fixunssfsi>:
 790:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__fp_splitA>
 794:	88 f0       	brcs	.+34     	; 0x7b8 <__fixunssfsi+0x28>
 796:	9f 57       	subi	r25, 0x7F	; 127
 798:	98 f0       	brcs	.+38     	; 0x7c0 <__fixunssfsi+0x30>
 79a:	b9 2f       	mov	r27, r25
 79c:	99 27       	eor	r25, r25
 79e:	b7 51       	subi	r27, 0x17	; 23
 7a0:	b0 f0       	brcs	.+44     	; 0x7ce <__fixunssfsi+0x3e>
 7a2:	e1 f0       	breq	.+56     	; 0x7dc <__fixunssfsi+0x4c>
 7a4:	66 0f       	add	r22, r22
 7a6:	77 1f       	adc	r23, r23
 7a8:	88 1f       	adc	r24, r24
 7aa:	99 1f       	adc	r25, r25
 7ac:	1a f0       	brmi	.+6      	; 0x7b4 <__fixunssfsi+0x24>
 7ae:	ba 95       	dec	r27
 7b0:	c9 f7       	brne	.-14     	; 0x7a4 <__fixunssfsi+0x14>
 7b2:	14 c0       	rjmp	.+40     	; 0x7dc <__fixunssfsi+0x4c>
 7b4:	b1 30       	cpi	r27, 0x01	; 1
 7b6:	91 f0       	breq	.+36     	; 0x7dc <__fixunssfsi+0x4c>
 7b8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__fp_zero>
 7bc:	b1 e0       	ldi	r27, 0x01	; 1
 7be:	08 95       	ret
 7c0:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <__fp_zero>
 7c4:	67 2f       	mov	r22, r23
 7c6:	78 2f       	mov	r23, r24
 7c8:	88 27       	eor	r24, r24
 7ca:	b8 5f       	subi	r27, 0xF8	; 248
 7cc:	39 f0       	breq	.+14     	; 0x7dc <__fixunssfsi+0x4c>
 7ce:	b9 3f       	cpi	r27, 0xF9	; 249
 7d0:	cc f3       	brlt	.-14     	; 0x7c4 <__fixunssfsi+0x34>
 7d2:	86 95       	lsr	r24
 7d4:	77 95       	ror	r23
 7d6:	67 95       	ror	r22
 7d8:	b3 95       	inc	r27
 7da:	d9 f7       	brne	.-10     	; 0x7d2 <__fixunssfsi+0x42>
 7dc:	3e f4       	brtc	.+14     	; 0x7ec <__fixunssfsi+0x5c>
 7de:	90 95       	com	r25
 7e0:	80 95       	com	r24
 7e2:	70 95       	com	r23
 7e4:	61 95       	neg	r22
 7e6:	7f 4f       	sbci	r23, 0xFF	; 255
 7e8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ea:	9f 4f       	sbci	r25, 0xFF	; 255
 7ec:	08 95       	ret

000007ee <__floatunsisf>:
 7ee:	e8 94       	clt
 7f0:	09 c0       	rjmp	.+18     	; 0x804 <__DATA_REGION_LENGTH__+0x4>

000007f2 <__floatsisf>:
 7f2:	97 fb       	bst	r25, 7
 7f4:	3e f4       	brtc	.+14     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7f6:	90 95       	com	r25
 7f8:	80 95       	com	r24
 7fa:	70 95       	com	r23
 7fc:	61 95       	neg	r22
 7fe:	7f 4f       	sbci	r23, 0xFF	; 255
 800:	8f 4f       	sbci	r24, 0xFF	; 255
 802:	9f 4f       	sbci	r25, 0xFF	; 255
 804:	99 23       	and	r25, r25
 806:	a9 f0       	breq	.+42     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 808:	f9 2f       	mov	r31, r25
 80a:	96 e9       	ldi	r25, 0x96	; 150
 80c:	bb 27       	eor	r27, r27
 80e:	93 95       	inc	r25
 810:	f6 95       	lsr	r31
 812:	87 95       	ror	r24
 814:	77 95       	ror	r23
 816:	67 95       	ror	r22
 818:	b7 95       	ror	r27
 81a:	f1 11       	cpse	r31, r1
 81c:	f8 cf       	rjmp	.-16     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 81e:	fa f4       	brpl	.+62     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 820:	bb 0f       	add	r27, r27
 822:	11 f4       	brne	.+4      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 824:	60 ff       	sbrs	r22, 0
 826:	1b c0       	rjmp	.+54     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 828:	6f 5f       	subi	r22, 0xFF	; 255
 82a:	7f 4f       	sbci	r23, 0xFF	; 255
 82c:	8f 4f       	sbci	r24, 0xFF	; 255
 82e:	9f 4f       	sbci	r25, 0xFF	; 255
 830:	16 c0       	rjmp	.+44     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 832:	88 23       	and	r24, r24
 834:	11 f0       	breq	.+4      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 836:	96 e9       	ldi	r25, 0x96	; 150
 838:	11 c0       	rjmp	.+34     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 83a:	77 23       	and	r23, r23
 83c:	21 f0       	breq	.+8      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 83e:	9e e8       	ldi	r25, 0x8E	; 142
 840:	87 2f       	mov	r24, r23
 842:	76 2f       	mov	r23, r22
 844:	05 c0       	rjmp	.+10     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 846:	66 23       	and	r22, r22
 848:	71 f0       	breq	.+28     	; 0x866 <__stack+0x7>
 84a:	96 e8       	ldi	r25, 0x86	; 134
 84c:	86 2f       	mov	r24, r22
 84e:	70 e0       	ldi	r23, 0x00	; 0
 850:	60 e0       	ldi	r22, 0x00	; 0
 852:	2a f0       	brmi	.+10     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 854:	9a 95       	dec	r25
 856:	66 0f       	add	r22, r22
 858:	77 1f       	adc	r23, r23
 85a:	88 1f       	adc	r24, r24
 85c:	da f7       	brpl	.-10     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 85e:	88 0f       	add	r24, r24
 860:	96 95       	lsr	r25
 862:	87 95       	ror	r24
 864:	97 f9       	bld	r25, 7
 866:	08 95       	ret

00000868 <__fp_inf>:
 868:	97 f9       	bld	r25, 7
 86a:	9f 67       	ori	r25, 0x7F	; 127
 86c:	80 e8       	ldi	r24, 0x80	; 128
 86e:	70 e0       	ldi	r23, 0x00	; 0
 870:	60 e0       	ldi	r22, 0x00	; 0
 872:	08 95       	ret

00000874 <__fp_nan>:
 874:	9f ef       	ldi	r25, 0xFF	; 255
 876:	80 ec       	ldi	r24, 0xC0	; 192
 878:	08 95       	ret

0000087a <__fp_pscA>:
 87a:	00 24       	eor	r0, r0
 87c:	0a 94       	dec	r0
 87e:	16 16       	cp	r1, r22
 880:	17 06       	cpc	r1, r23
 882:	18 06       	cpc	r1, r24
 884:	09 06       	cpc	r0, r25
 886:	08 95       	ret

00000888 <__fp_pscB>:
 888:	00 24       	eor	r0, r0
 88a:	0a 94       	dec	r0
 88c:	12 16       	cp	r1, r18
 88e:	13 06       	cpc	r1, r19
 890:	14 06       	cpc	r1, r20
 892:	05 06       	cpc	r0, r21
 894:	08 95       	ret

00000896 <__fp_round>:
 896:	09 2e       	mov	r0, r25
 898:	03 94       	inc	r0
 89a:	00 0c       	add	r0, r0
 89c:	11 f4       	brne	.+4      	; 0x8a2 <__fp_round+0xc>
 89e:	88 23       	and	r24, r24
 8a0:	52 f0       	brmi	.+20     	; 0x8b6 <__fp_round+0x20>
 8a2:	bb 0f       	add	r27, r27
 8a4:	40 f4       	brcc	.+16     	; 0x8b6 <__fp_round+0x20>
 8a6:	bf 2b       	or	r27, r31
 8a8:	11 f4       	brne	.+4      	; 0x8ae <__fp_round+0x18>
 8aa:	60 ff       	sbrs	r22, 0
 8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__fp_round+0x20>
 8ae:	6f 5f       	subi	r22, 0xFF	; 255
 8b0:	7f 4f       	sbci	r23, 0xFF	; 255
 8b2:	8f 4f       	sbci	r24, 0xFF	; 255
 8b4:	9f 4f       	sbci	r25, 0xFF	; 255
 8b6:	08 95       	ret

000008b8 <__fp_split3>:
 8b8:	57 fd       	sbrc	r21, 7
 8ba:	90 58       	subi	r25, 0x80	; 128
 8bc:	44 0f       	add	r20, r20
 8be:	55 1f       	adc	r21, r21
 8c0:	59 f0       	breq	.+22     	; 0x8d8 <__fp_splitA+0x10>
 8c2:	5f 3f       	cpi	r21, 0xFF	; 255
 8c4:	71 f0       	breq	.+28     	; 0x8e2 <__fp_splitA+0x1a>
 8c6:	47 95       	ror	r20

000008c8 <__fp_splitA>:
 8c8:	88 0f       	add	r24, r24
 8ca:	97 fb       	bst	r25, 7
 8cc:	99 1f       	adc	r25, r25
 8ce:	61 f0       	breq	.+24     	; 0x8e8 <__fp_splitA+0x20>
 8d0:	9f 3f       	cpi	r25, 0xFF	; 255
 8d2:	79 f0       	breq	.+30     	; 0x8f2 <__fp_splitA+0x2a>
 8d4:	87 95       	ror	r24
 8d6:	08 95       	ret
 8d8:	12 16       	cp	r1, r18
 8da:	13 06       	cpc	r1, r19
 8dc:	14 06       	cpc	r1, r20
 8de:	55 1f       	adc	r21, r21
 8e0:	f2 cf       	rjmp	.-28     	; 0x8c6 <__fp_split3+0xe>
 8e2:	46 95       	lsr	r20
 8e4:	f1 df       	rcall	.-30     	; 0x8c8 <__fp_splitA>
 8e6:	08 c0       	rjmp	.+16     	; 0x8f8 <__fp_splitA+0x30>
 8e8:	16 16       	cp	r1, r22
 8ea:	17 06       	cpc	r1, r23
 8ec:	18 06       	cpc	r1, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	f1 cf       	rjmp	.-30     	; 0x8d4 <__fp_splitA+0xc>
 8f2:	86 95       	lsr	r24
 8f4:	71 05       	cpc	r23, r1
 8f6:	61 05       	cpc	r22, r1
 8f8:	08 94       	sec
 8fa:	08 95       	ret

000008fc <__fp_zero>:
 8fc:	e8 94       	clt

000008fe <__fp_szero>:
 8fe:	bb 27       	eor	r27, r27
 900:	66 27       	eor	r22, r22
 902:	77 27       	eor	r23, r23
 904:	cb 01       	movw	r24, r22
 906:	97 f9       	bld	r25, 7
 908:	08 95       	ret

0000090a <__mulsf3>:
 90a:	0e 94 98 04 	call	0x930	; 0x930 <__mulsf3x>
 90e:	0c 94 4b 04 	jmp	0x896	; 0x896 <__fp_round>
 912:	0e 94 3d 04 	call	0x87a	; 0x87a <__fp_pscA>
 916:	38 f0       	brcs	.+14     	; 0x926 <__mulsf3+0x1c>
 918:	0e 94 44 04 	call	0x888	; 0x888 <__fp_pscB>
 91c:	20 f0       	brcs	.+8      	; 0x926 <__mulsf3+0x1c>
 91e:	95 23       	and	r25, r21
 920:	11 f0       	breq	.+4      	; 0x926 <__mulsf3+0x1c>
 922:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_inf>
 926:	0c 94 3a 04 	jmp	0x874	; 0x874 <__fp_nan>
 92a:	11 24       	eor	r1, r1
 92c:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <__fp_szero>

00000930 <__mulsf3x>:
 930:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__fp_split3>
 934:	70 f3       	brcs	.-36     	; 0x912 <__mulsf3+0x8>

00000936 <__mulsf3_pse>:
 936:	95 9f       	mul	r25, r21
 938:	c1 f3       	breq	.-16     	; 0x92a <__mulsf3+0x20>
 93a:	95 0f       	add	r25, r21
 93c:	50 e0       	ldi	r21, 0x00	; 0
 93e:	55 1f       	adc	r21, r21
 940:	62 9f       	mul	r22, r18
 942:	f0 01       	movw	r30, r0
 944:	72 9f       	mul	r23, r18
 946:	bb 27       	eor	r27, r27
 948:	f0 0d       	add	r31, r0
 94a:	b1 1d       	adc	r27, r1
 94c:	63 9f       	mul	r22, r19
 94e:	aa 27       	eor	r26, r26
 950:	f0 0d       	add	r31, r0
 952:	b1 1d       	adc	r27, r1
 954:	aa 1f       	adc	r26, r26
 956:	64 9f       	mul	r22, r20
 958:	66 27       	eor	r22, r22
 95a:	b0 0d       	add	r27, r0
 95c:	a1 1d       	adc	r26, r1
 95e:	66 1f       	adc	r22, r22
 960:	82 9f       	mul	r24, r18
 962:	22 27       	eor	r18, r18
 964:	b0 0d       	add	r27, r0
 966:	a1 1d       	adc	r26, r1
 968:	62 1f       	adc	r22, r18
 96a:	73 9f       	mul	r23, r19
 96c:	b0 0d       	add	r27, r0
 96e:	a1 1d       	adc	r26, r1
 970:	62 1f       	adc	r22, r18
 972:	83 9f       	mul	r24, r19
 974:	a0 0d       	add	r26, r0
 976:	61 1d       	adc	r22, r1
 978:	22 1f       	adc	r18, r18
 97a:	74 9f       	mul	r23, r20
 97c:	33 27       	eor	r19, r19
 97e:	a0 0d       	add	r26, r0
 980:	61 1d       	adc	r22, r1
 982:	23 1f       	adc	r18, r19
 984:	84 9f       	mul	r24, r20
 986:	60 0d       	add	r22, r0
 988:	21 1d       	adc	r18, r1
 98a:	82 2f       	mov	r24, r18
 98c:	76 2f       	mov	r23, r22
 98e:	6a 2f       	mov	r22, r26
 990:	11 24       	eor	r1, r1
 992:	9f 57       	subi	r25, 0x7F	; 127
 994:	50 40       	sbci	r21, 0x00	; 0
 996:	9a f0       	brmi	.+38     	; 0x9be <__mulsf3_pse+0x88>
 998:	f1 f0       	breq	.+60     	; 0x9d6 <__mulsf3_pse+0xa0>
 99a:	88 23       	and	r24, r24
 99c:	4a f0       	brmi	.+18     	; 0x9b0 <__mulsf3_pse+0x7a>
 99e:	ee 0f       	add	r30, r30
 9a0:	ff 1f       	adc	r31, r31
 9a2:	bb 1f       	adc	r27, r27
 9a4:	66 1f       	adc	r22, r22
 9a6:	77 1f       	adc	r23, r23
 9a8:	88 1f       	adc	r24, r24
 9aa:	91 50       	subi	r25, 0x01	; 1
 9ac:	50 40       	sbci	r21, 0x00	; 0
 9ae:	a9 f7       	brne	.-22     	; 0x99a <__mulsf3_pse+0x64>
 9b0:	9e 3f       	cpi	r25, 0xFE	; 254
 9b2:	51 05       	cpc	r21, r1
 9b4:	80 f0       	brcs	.+32     	; 0x9d6 <__mulsf3_pse+0xa0>
 9b6:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_inf>
 9ba:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <__fp_szero>
 9be:	5f 3f       	cpi	r21, 0xFF	; 255
 9c0:	e4 f3       	brlt	.-8      	; 0x9ba <__mulsf3_pse+0x84>
 9c2:	98 3e       	cpi	r25, 0xE8	; 232
 9c4:	d4 f3       	brlt	.-12     	; 0x9ba <__mulsf3_pse+0x84>
 9c6:	86 95       	lsr	r24
 9c8:	77 95       	ror	r23
 9ca:	67 95       	ror	r22
 9cc:	b7 95       	ror	r27
 9ce:	f7 95       	ror	r31
 9d0:	e7 95       	ror	r30
 9d2:	9f 5f       	subi	r25, 0xFF	; 255
 9d4:	c1 f7       	brne	.-16     	; 0x9c6 <__mulsf3_pse+0x90>
 9d6:	fe 2b       	or	r31, r30
 9d8:	88 0f       	add	r24, r24
 9da:	91 1d       	adc	r25, r1
 9dc:	96 95       	lsr	r25
 9de:	87 95       	ror	r24
 9e0:	97 f9       	bld	r25, 7
 9e2:	08 95       	ret

000009e4 <__itoa_ncheck>:
 9e4:	bb 27       	eor	r27, r27
 9e6:	4a 30       	cpi	r20, 0x0A	; 10
 9e8:	31 f4       	brne	.+12     	; 0x9f6 <__itoa_ncheck+0x12>
 9ea:	99 23       	and	r25, r25
 9ec:	22 f4       	brpl	.+8      	; 0x9f6 <__itoa_ncheck+0x12>
 9ee:	bd e2       	ldi	r27, 0x2D	; 45
 9f0:	90 95       	com	r25
 9f2:	81 95       	neg	r24
 9f4:	9f 4f       	sbci	r25, 0xFF	; 255
 9f6:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__utoa_common>

000009fa <__utoa_ncheck>:
 9fa:	bb 27       	eor	r27, r27

000009fc <__utoa_common>:
 9fc:	fb 01       	movw	r30, r22
 9fe:	55 27       	eor	r21, r21
 a00:	aa 27       	eor	r26, r26
 a02:	88 0f       	add	r24, r24
 a04:	99 1f       	adc	r25, r25
 a06:	aa 1f       	adc	r26, r26
 a08:	a4 17       	cp	r26, r20
 a0a:	10 f0       	brcs	.+4      	; 0xa10 <__utoa_common+0x14>
 a0c:	a4 1b       	sub	r26, r20
 a0e:	83 95       	inc	r24
 a10:	50 51       	subi	r21, 0x10	; 16
 a12:	b9 f7       	brne	.-18     	; 0xa02 <__utoa_common+0x6>
 a14:	a0 5d       	subi	r26, 0xD0	; 208
 a16:	aa 33       	cpi	r26, 0x3A	; 58
 a18:	08 f0       	brcs	.+2      	; 0xa1c <__utoa_common+0x20>
 a1a:	a9 5d       	subi	r26, 0xD9	; 217
 a1c:	a1 93       	st	Z+, r26
 a1e:	00 97       	sbiw	r24, 0x00	; 0
 a20:	79 f7       	brne	.-34     	; 0xa00 <__utoa_common+0x4>
 a22:	b1 11       	cpse	r27, r1
 a24:	b1 93       	st	Z+, r27
 a26:	11 92       	st	Z+, r1
 a28:	cb 01       	movw	r24, r22
 a2a:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <strrev>

00000a2e <strrev>:
 a2e:	dc 01       	movw	r26, r24
 a30:	fc 01       	movw	r30, r24
 a32:	67 2f       	mov	r22, r23
 a34:	71 91       	ld	r23, Z+
 a36:	77 23       	and	r23, r23
 a38:	e1 f7       	brne	.-8      	; 0xa32 <strrev+0x4>
 a3a:	32 97       	sbiw	r30, 0x02	; 2
 a3c:	04 c0       	rjmp	.+8      	; 0xa46 <strrev+0x18>
 a3e:	7c 91       	ld	r23, X
 a40:	6d 93       	st	X+, r22
 a42:	70 83       	st	Z, r23
 a44:	62 91       	ld	r22, -Z
 a46:	ae 17       	cp	r26, r30
 a48:	bf 07       	cpc	r27, r31
 a4a:	c8 f3       	brcs	.-14     	; 0xa3e <strrev+0x10>
 a4c:	08 95       	ret

00000a4e <_exit>:
 a4e:	f8 94       	cli

00000a50 <__stop_program>:
 a50:	ff cf       	rjmp	.-2      	; 0xa50 <__stop_program>
