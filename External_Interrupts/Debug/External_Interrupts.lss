
External_Interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000288  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001032  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f0  00000000  00000000  0000146a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006bb  00000000  00000000  00001d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ac  00000000  00000000  00002418  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000076e  00000000  00000000  000025c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000569  00000000  00000000  00002d32  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  0000329b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 76 00 	call	0xec	; 0xec <main>
  74:	0c 94 42 01 	jmp	0x284	; 0x284 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Led_Init>:
#include "LED.h"
#include "DIO.h"

void Led_Init(volatile uint8* led_reg, LedEnum_t led_no)
{
	Dio_ChannelDirectionSet(led_reg, led_no, DIO_OUTPUT);
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	0e 94 88 00 	call	0x110	; 0x110 <Dio_ChannelDirectionSet>
  82:	08 95       	ret

00000084 <Led_State_Set>:
}


void Led_State_Set(volatile uint8* led_reg, LedEnum_t led_no, LedStateEnum_t state)
{
	if(state == LED_TOGGLE)
  84:	42 30       	cpi	r20, 0x02	; 2
  86:	19 f4       	brne	.+6      	; 0x8e <Led_State_Set+0xa>
	{
		Dio_ChannelToggle(led_reg, led_no);
  88:	0e 94 c4 00 	call	0x188	; 0x188 <Dio_ChannelToggle>
  8c:	08 95       	ret
	}
	else
	{
		Dio_ChannelWrite(led_reg, led_no, state);
  8e:	0e 94 a6 00 	call	0x14c	; 0x14c <Dio_ChannelWrite>
  92:	08 95       	ret

00000094 <Switch_Init>:

DioPinStateEnum_t SwitchPreviousState = SW_RELEASED;

void Switch_Init(volatile uint8* sw_reg, SwitchEnum_t sw_no)
{
	Dio_ChannelDirectionSet(sw_reg, sw_no, DIO_INPUT);
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	0e 94 88 00 	call	0x110	; 0x110 <Dio_ChannelDirectionSet>
  9a:	08 95       	ret

0000009c <__vector_1>:
#include "ATmega32A_Configuration.h"
#include "avr/interrupt.h"


ISR(INT0_vect)
{
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	2f 93       	push	r18
  a8:	3f 93       	push	r19
  aa:	4f 93       	push	r20
  ac:	5f 93       	push	r21
  ae:	6f 93       	push	r22
  b0:	7f 93       	push	r23
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	af 93       	push	r26
  b8:	bf 93       	push	r27
  ba:	ef 93       	push	r30
  bc:	ff 93       	push	r31
	Led_State_Set(LED0_OUT_REG, LED_0, LED_TOGGLE);
  be:	42 e0       	ldi	r20, 0x02	; 2
  c0:	62 e0       	ldi	r22, 0x02	; 2
  c2:	85 e3       	ldi	r24, 0x35	; 53
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 42 00 	call	0x84	; 0x84 <Led_State_Set>
}
  ca:	ff 91       	pop	r31
  cc:	ef 91       	pop	r30
  ce:	bf 91       	pop	r27
  d0:	af 91       	pop	r26
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	7f 91       	pop	r23
  d8:	6f 91       	pop	r22
  da:	5f 91       	pop	r21
  dc:	4f 91       	pop	r20
  de:	3f 91       	pop	r19
  e0:	2f 91       	pop	r18
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <main>:


int main(void)
{
	ExternalInterruptEnable(EXTERNAL_INT0, RISING_EDGE_MODE);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <ExternalInterruptEnable>
	GlobalInterruptsStateSet(GLOBAL_INTERRUPTS_ENABLE);
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	0e 94 35 01 	call	0x26a	; 0x26a <GlobalInterruptsStateSet>
	Switch_Init(SW2_DIR_REG, SW_2);
  fa:	62 e0       	ldi	r22, 0x02	; 2
  fc:	81 e3       	ldi	r24, 0x31	; 49
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 4a 00 	call	0x94	; 0x94 <Switch_Init>
	Led_Init(LED0_DIR_REG, LED_0);	
 104:	62 e0       	ldi	r22, 0x02	; 2
 106:	84 e3       	ldi	r24, 0x34	; 52
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 3e 00 	call	0x7c	; 0x7c <Led_Init>
 10e:	ff cf       	rjmp	.-2      	; 0x10e <main+0x22>

00000110 <Dio_ChannelDirectionSet>:

DioPinStateEnum_t Dio_ChannelRead(volatile uint8* port_reg, DioPinEnum_t channel)
{
	DioPinStateEnum_t u8LocalPinValue = READ_BIT(*port_reg, channel);
	return (u8LocalPinValue);
}
 110:	44 23       	and	r20, r20
 112:	19 f0       	breq	.+6      	; 0x11a <Dio_ChannelDirectionSet+0xa>
 114:	41 30       	cpi	r20, 0x01	; 1
 116:	71 f0       	breq	.+28     	; 0x134 <Dio_ChannelDirectionSet+0x24>
 118:	08 95       	ret
 11a:	fc 01       	movw	r30, r24
 11c:	40 81       	ld	r20, Z
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <Dio_ChannelDirectionSet+0x18>
 124:	22 0f       	add	r18, r18
 126:	33 1f       	adc	r19, r19
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <Dio_ChannelDirectionSet+0x14>
 12c:	20 95       	com	r18
 12e:	24 23       	and	r18, r20
 130:	20 83       	st	Z, r18
 132:	08 95       	ret
 134:	fc 01       	movw	r30, r24
 136:	40 81       	ld	r20, Z
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <Dio_ChannelDirectionSet+0x32>
 13e:	22 0f       	add	r18, r18
 140:	33 1f       	adc	r19, r19
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <Dio_ChannelDirectionSet+0x2e>
 146:	24 2b       	or	r18, r20
 148:	20 83       	st	Z, r18
 14a:	08 95       	ret

0000014c <Dio_ChannelWrite>:


void Dio_ChannelWrite(volatile uint8* port_reg, DioPinEnum_t channel, DioPinStateEnum_t state)
{
	switch(state)
 14c:	44 23       	and	r20, r20
 14e:	19 f0       	breq	.+6      	; 0x156 <Dio_ChannelWrite+0xa>
 150:	41 30       	cpi	r20, 0x01	; 1
 152:	71 f0       	breq	.+28     	; 0x170 <Dio_ChannelWrite+0x24>
 154:	08 95       	ret
	{
		case DIO_LOW:
			CLEAR_BIT(*port_reg, channel);
 156:	fc 01       	movw	r30, r24
 158:	40 81       	ld	r20, Z
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <Dio_ChannelWrite+0x18>
 160:	22 0f       	add	r18, r18
 162:	33 1f       	adc	r19, r19
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <Dio_ChannelWrite+0x14>
 168:	20 95       	com	r18
 16a:	24 23       	and	r18, r20
 16c:	20 83       	st	Z, r18
			break;
 16e:	08 95       	ret
		case DIO_HIGH:
			SET_BIT(*port_reg, channel);
 170:	fc 01       	movw	r30, r24
 172:	40 81       	ld	r20, Z
 174:	21 e0       	ldi	r18, 0x01	; 1
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <Dio_ChannelWrite+0x32>
 17a:	22 0f       	add	r18, r18
 17c:	33 1f       	adc	r19, r19
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <Dio_ChannelWrite+0x2e>
 182:	24 2b       	or	r18, r20
 184:	20 83       	st	Z, r18
 186:	08 95       	ret

00000188 <Dio_ChannelToggle>:
}


void Dio_ChannelToggle(volatile uint8* port_reg, DioPinEnum_t channel)
{
	TOGGLE_BIT(*port_reg, channel);
 188:	fc 01       	movw	r30, r24
 18a:	40 81       	ld	r20, Z
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <Dio_ChannelToggle+0xe>
 192:	22 0f       	add	r18, r18
 194:	33 1f       	adc	r19, r19
 196:	6a 95       	dec	r22
 198:	e2 f7       	brpl	.-8      	; 0x192 <Dio_ChannelToggle+0xa>
 19a:	24 27       	eor	r18, r20
 19c:	20 83       	st	Z, r18
 19e:	08 95       	ret

000001a0 <ExternalInterruptEnable>:
			break;
		case EXTERNAL_INT1:
			CLEAR_BIT(*GENERAL_INTERRUPT_CTRL_REG, INT1_ENABLE_BIT);
			break;
		case EXTERNAL_INT2:
			CLEAR_BIT(*GENERAL_INTERRUPT_CTRL_REG, INT2_ENABLE_BIT);
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	61 f1       	breq	.+88     	; 0x1fc <ExternalInterruptEnable+0x5c>
 1a4:	20 f0       	brcs	.+8      	; 0x1ae <ExternalInterruptEnable+0xe>
 1a6:	82 30       	cpi	r24, 0x02	; 2
 1a8:	09 f4       	brne	.+2      	; 0x1ac <ExternalInterruptEnable+0xc>
 1aa:	4f c0       	rjmp	.+158    	; 0x24a <ExternalInterruptEnable+0xaa>
 1ac:	08 95       	ret
 1ae:	61 30       	cpi	r22, 0x01	; 1
 1b0:	69 f0       	breq	.+26     	; 0x1cc <ExternalInterruptEnable+0x2c>
 1b2:	28 f0       	brcs	.+10     	; 0x1be <ExternalInterruptEnable+0x1e>
 1b4:	62 30       	cpi	r22, 0x02	; 2
 1b6:	c1 f0       	breq	.+48     	; 0x1e8 <ExternalInterruptEnable+0x48>
 1b8:	63 30       	cpi	r22, 0x03	; 3
 1ba:	79 f0       	breq	.+30     	; 0x1da <ExternalInterruptEnable+0x3a>
 1bc:	1b c0       	rjmp	.+54     	; 0x1f4 <ExternalInterruptEnable+0x54>
 1be:	85 b7       	in	r24, 0x35	; 53
 1c0:	81 60       	ori	r24, 0x01	; 1
 1c2:	85 bf       	out	0x35, r24	; 53
 1c4:	85 b7       	in	r24, 0x35	; 53
 1c6:	82 60       	ori	r24, 0x02	; 2
 1c8:	85 bf       	out	0x35, r24	; 53
 1ca:	14 c0       	rjmp	.+40     	; 0x1f4 <ExternalInterruptEnable+0x54>
 1cc:	85 b7       	in	r24, 0x35	; 53
 1ce:	8e 7f       	andi	r24, 0xFE	; 254
 1d0:	85 bf       	out	0x35, r24	; 53
 1d2:	85 b7       	in	r24, 0x35	; 53
 1d4:	82 60       	ori	r24, 0x02	; 2
 1d6:	85 bf       	out	0x35, r24	; 53
 1d8:	0d c0       	rjmp	.+26     	; 0x1f4 <ExternalInterruptEnable+0x54>
 1da:	85 b7       	in	r24, 0x35	; 53
 1dc:	8e 7f       	andi	r24, 0xFE	; 254
 1de:	85 bf       	out	0x35, r24	; 53
 1e0:	85 b7       	in	r24, 0x35	; 53
 1e2:	8d 7f       	andi	r24, 0xFD	; 253
 1e4:	85 bf       	out	0x35, r24	; 53
 1e6:	06 c0       	rjmp	.+12     	; 0x1f4 <ExternalInterruptEnable+0x54>
 1e8:	85 b7       	in	r24, 0x35	; 53
 1ea:	81 60       	ori	r24, 0x01	; 1
 1ec:	85 bf       	out	0x35, r24	; 53
 1ee:	85 b7       	in	r24, 0x35	; 53
 1f0:	8d 7f       	andi	r24, 0xFD	; 253
 1f2:	85 bf       	out	0x35, r24	; 53
 1f4:	8b b7       	in	r24, 0x3b	; 59
 1f6:	80 64       	ori	r24, 0x40	; 64
 1f8:	8b bf       	out	0x3b, r24	; 59
 1fa:	08 95       	ret
 1fc:	61 30       	cpi	r22, 0x01	; 1
 1fe:	69 f0       	breq	.+26     	; 0x21a <ExternalInterruptEnable+0x7a>
 200:	28 f0       	brcs	.+10     	; 0x20c <ExternalInterruptEnable+0x6c>
 202:	62 30       	cpi	r22, 0x02	; 2
 204:	c1 f0       	breq	.+48     	; 0x236 <ExternalInterruptEnable+0x96>
 206:	63 30       	cpi	r22, 0x03	; 3
 208:	79 f0       	breq	.+30     	; 0x228 <ExternalInterruptEnable+0x88>
 20a:	1b c0       	rjmp	.+54     	; 0x242 <ExternalInterruptEnable+0xa2>
 20c:	85 b7       	in	r24, 0x35	; 53
 20e:	84 60       	ori	r24, 0x04	; 4
 210:	85 bf       	out	0x35, r24	; 53
 212:	85 b7       	in	r24, 0x35	; 53
 214:	88 60       	ori	r24, 0x08	; 8
 216:	85 bf       	out	0x35, r24	; 53
 218:	14 c0       	rjmp	.+40     	; 0x242 <ExternalInterruptEnable+0xa2>
 21a:	85 b7       	in	r24, 0x35	; 53
 21c:	8b 7f       	andi	r24, 0xFB	; 251
 21e:	85 bf       	out	0x35, r24	; 53
 220:	85 b7       	in	r24, 0x35	; 53
 222:	88 60       	ori	r24, 0x08	; 8
 224:	85 bf       	out	0x35, r24	; 53
 226:	0d c0       	rjmp	.+26     	; 0x242 <ExternalInterruptEnable+0xa2>
 228:	85 b7       	in	r24, 0x35	; 53
 22a:	8b 7f       	andi	r24, 0xFB	; 251
 22c:	85 bf       	out	0x35, r24	; 53
 22e:	85 b7       	in	r24, 0x35	; 53
 230:	87 7f       	andi	r24, 0xF7	; 247
 232:	85 bf       	out	0x35, r24	; 53
 234:	06 c0       	rjmp	.+12     	; 0x242 <ExternalInterruptEnable+0xa2>
 236:	85 b7       	in	r24, 0x35	; 53
 238:	84 60       	ori	r24, 0x04	; 4
 23a:	85 bf       	out	0x35, r24	; 53
 23c:	85 b7       	in	r24, 0x35	; 53
 23e:	87 7f       	andi	r24, 0xF7	; 247
 240:	85 bf       	out	0x35, r24	; 53
 242:	8b b7       	in	r24, 0x3b	; 59
 244:	80 68       	ori	r24, 0x80	; 128
 246:	8b bf       	out	0x3b, r24	; 59
 248:	08 95       	ret
 24a:	66 23       	and	r22, r22
 24c:	19 f0       	breq	.+6      	; 0x254 <ExternalInterruptEnable+0xb4>
 24e:	61 30       	cpi	r22, 0x01	; 1
 250:	29 f0       	breq	.+10     	; 0x25c <ExternalInterruptEnable+0xbc>
 252:	07 c0       	rjmp	.+14     	; 0x262 <ExternalInterruptEnable+0xc2>
 254:	84 b7       	in	r24, 0x34	; 52
 256:	80 64       	ori	r24, 0x40	; 64
 258:	84 bf       	out	0x34, r24	; 52
 25a:	03 c0       	rjmp	.+6      	; 0x262 <ExternalInterruptEnable+0xc2>
 25c:	84 b7       	in	r24, 0x34	; 52
 25e:	8f 7b       	andi	r24, 0xBF	; 191
 260:	84 bf       	out	0x34, r24	; 52
 262:	8b b7       	in	r24, 0x3b	; 59
 264:	80 62       	ori	r24, 0x20	; 32
 266:	8b bf       	out	0x3b, r24	; 59
 268:	08 95       	ret

0000026a <GlobalInterruptsStateSet>:
	}
}

void GlobalInterruptsStateSet(GlobalInterruptsStateEnum_t state)
{
	switch (state)
 26a:	88 23       	and	r24, r24
 26c:	19 f0       	breq	.+6      	; 0x274 <GlobalInterruptsStateSet+0xa>
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	29 f0       	breq	.+10     	; 0x27c <GlobalInterruptsStateSet+0x12>
 272:	08 95       	ret
	{
		case GLOBAL_INTERRUPTS_DISABLE:
			CLEAR_BIT(*AVR_STATUS_REG, GLOBAL_INTERRUPTS_ENABLE_BIT);
 274:	8f b7       	in	r24, 0x3f	; 63
 276:	8f 77       	andi	r24, 0x7F	; 127
 278:	8f bf       	out	0x3f, r24	; 63
			break;
 27a:	08 95       	ret
		case GLOBAL_INTERRUPTS_ENABLE:
			SET_BIT(*AVR_STATUS_REG, GLOBAL_INTERRUPTS_ENABLE_BIT);
 27c:	8f b7       	in	r24, 0x3f	; 63
 27e:	80 68       	ori	r24, 0x80	; 128
 280:	8f bf       	out	0x3f, r24	; 63
 282:	08 95       	ret

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
