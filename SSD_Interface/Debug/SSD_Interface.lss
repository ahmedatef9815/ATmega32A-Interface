
SSD_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000264  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000264  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cdb  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000767  00000000  00000000  000010c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000439  00000000  00000000  0000182a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00001c64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000577  00000000  00000000  00001d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000286  00000000  00000000  000022cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002551  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e6       	ldi	r30, 0x64	; 100
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 de 00 	call	0x1bc	; 0x1bc <main>
  7a:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <SSD_Init>:
	

void SSD_Init()
{
	//Make Seven Segment Enable Pins in OUTPUT Mode 
	Dio_ChannelDirectionSet(SSD_CTRL_DIR_REG, SSD1_EN, DIO_OUTPUT);
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	87 e3       	ldi	r24, 0x37	; 55
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(SSD_CTRL_DIR_REG, SSD2_EN, DIO_OUTPUT);
  8e:	41 e0       	ldi	r20, 0x01	; 1
  90:	62 e0       	ldi	r22, 0x02	; 2
  92:	87 e3       	ldi	r24, 0x37	; 55
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Dio_ChannelDirectionSet>
	
	//Make Seven Segment Data Pins in OUTPUT Mode 
	*SSD_DATA_DIR_REG = 0xF0U;
  9a:	80 ef       	ldi	r24, 0xF0	; 240
  9c:	8a bb       	out	0x1a, r24	; 26
  9e:	08 95       	ret

000000a0 <SSD_Number_Display>:
}


void SSD_Number_Display(SSDLedsEnum_t num, uint8 ssd_no)
{
  a0:	cf 93       	push	r28
  a2:	c8 2f       	mov	r28, r24
	switch(ssd_no)
  a4:	61 30       	cpi	r22, 0x01	; 1
  a6:	19 f0       	breq	.+6      	; 0xae <SSD_Number_Display+0xe>
  a8:	62 30       	cpi	r22, 0x02	; 2
  aa:	71 f0       	breq	.+28     	; 0xc8 <SSD_Number_Display+0x28>
  ac:	1a c0       	rjmp	.+52     	; 0xe2 <SSD_Number_Display+0x42>
	{
		case SSD1_EN:
			Dio_ChannelWrite(SSD_CTRL_OUT_REG, SSD1_EN, DIO_HIGH);
  ae:	41 e0       	ldi	r20, 0x01	; 1
  b0:	61 e0       	ldi	r22, 0x01	; 1
  b2:	88 e3       	ldi	r24, 0x38	; 56
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 03 01 	call	0x206	; 0x206 <Dio_ChannelWrite>
			Dio_ChannelWrite(SSD_CTRL_OUT_REG, SSD2_EN, DIO_LOW);
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	62 e0       	ldi	r22, 0x02	; 2
  be:	88 e3       	ldi	r24, 0x38	; 56
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 03 01 	call	0x206	; 0x206 <Dio_ChannelWrite>
			break;
  c6:	19 c0       	rjmp	.+50     	; 0xfa <SSD_Number_Display+0x5a>
		case SSD2_EN:
			Dio_ChannelWrite(SSD_CTRL_OUT_REG, SSD1_EN, DIO_LOW);
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	61 e0       	ldi	r22, 0x01	; 1
  cc:	88 e3       	ldi	r24, 0x38	; 56
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 03 01 	call	0x206	; 0x206 <Dio_ChannelWrite>
			Dio_ChannelWrite(SSD_CTRL_OUT_REG, SSD2_EN, DIO_HIGH);
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	62 e0       	ldi	r22, 0x02	; 2
  d8:	88 e3       	ldi	r24, 0x38	; 56
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 03 01 	call	0x206	; 0x206 <Dio_ChannelWrite>
			break;
  e0:	0c c0       	rjmp	.+24     	; 0xfa <SSD_Number_Display+0x5a>
		default:
			Dio_ChannelWrite(SSD_CTRL_OUT_REG, SSD1_EN, DIO_LOW);
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	88 e3       	ldi	r24, 0x38	; 56
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 03 01 	call	0x206	; 0x206 <Dio_ChannelWrite>
			Dio_ChannelWrite(SSD_CTRL_OUT_REG, SSD2_EN, DIO_LOW);
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	62 e0       	ldi	r22, 0x02	; 2
  f2:	88 e3       	ldi	r24, 0x38	; 56
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 03 01 	call	0x206	; 0x206 <Dio_ChannelWrite>
			break;
	}
	
	//This line zero the 4-bits of the data before setting the new value
	*SSD_DATA_OUT_REG &=~ (0xF0U); 
  fa:	8b b3       	in	r24, 0x1b	; 27
  fc:	8f 70       	andi	r24, 0x0F	; 15
  fe:	8b bb       	out	0x1b, r24	; 27
	if (SSD_TYPE == SSD_COMMON_CATHODE)
	{
		*SSD_DATA_OUT_REG |= (num & 0xF0U);
 100:	8b b3       	in	r24, 0x1b	; 27
 102:	c0 7f       	andi	r28, 0xF0	; 240
 104:	c8 2b       	or	r28, r24
 106:	cb bb       	out	0x1b, r28	; 27
	}
	else if(SSD_TYPE == SSD_COMMON_ANODE)
	{
		*SSD_DATA_OUT_REG |= (~num & 0xF0U);
	}
}
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <SSD_Number_Set>:


//This function to display two numbers on two SSDs 
//actually I can not display one both at the same time so I will use delay
void SSD_Number_Set(uint16 number)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	ec 01       	movw	r28, r24
	SSD_Number_Display(gau8SSD_arr[(number%100)/10], SSD2_EN);
 112:	9c 01       	movw	r18, r24
 114:	36 95       	lsr	r19
 116:	27 95       	ror	r18
 118:	36 95       	lsr	r19
 11a:	27 95       	ror	r18
 11c:	ab e7       	ldi	r26, 0x7B	; 123
 11e:	b4 e1       	ldi	r27, 0x14	; 20
 120:	0e 94 21 01 	call	0x242	; 0x242 <__umulhisi3>
 124:	9c 01       	movw	r18, r24
 126:	36 95       	lsr	r19
 128:	27 95       	ror	r18
 12a:	44 e6       	ldi	r20, 0x64	; 100
 12c:	42 9f       	mul	r20, r18
 12e:	c0 01       	movw	r24, r0
 130:	43 9f       	mul	r20, r19
 132:	90 0d       	add	r25, r0
 134:	11 24       	eor	r1, r1
 136:	9e 01       	movw	r18, r28
 138:	28 1b       	sub	r18, r24
 13a:	39 0b       	sbc	r19, r25
 13c:	ad ec       	ldi	r26, 0xCD	; 205
 13e:	bc ec       	ldi	r27, 0xCC	; 204
 140:	0e 94 21 01 	call	0x242	; 0x242 <__umulhisi3>
 144:	96 95       	lsr	r25
 146:	87 95       	ror	r24
 148:	96 95       	lsr	r25
 14a:	87 95       	ror	r24
 14c:	96 95       	lsr	r25
 14e:	87 95       	ror	r24
 150:	fc 01       	movw	r30, r24
 152:	e0 5a       	subi	r30, 0xA0	; 160
 154:	ff 4f       	sbci	r31, 0xFF	; 255
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	80 81       	ld	r24, Z
 15a:	0e 94 50 00 	call	0xa0	; 0xa0 <SSD_Number_Display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	8f e3       	ldi	r24, 0x3F	; 63
 160:	9c e9       	ldi	r25, 0x9C	; 156
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <SSD_Number_Set+0x56>
 166:	00 c0       	rjmp	.+0      	; 0x168 <SSD_Number_Set+0x5c>
 168:	00 00       	nop
	_delay_ms(10);
	SSD_Number_Display(gau8SSD_arr[number%10], SSD1_EN);
 16a:	9e 01       	movw	r18, r28
 16c:	ad ec       	ldi	r26, 0xCD	; 205
 16e:	bc ec       	ldi	r27, 0xCC	; 204
 170:	0e 94 21 01 	call	0x242	; 0x242 <__umulhisi3>
 174:	96 95       	lsr	r25
 176:	87 95       	ror	r24
 178:	96 95       	lsr	r25
 17a:	87 95       	ror	r24
 17c:	96 95       	lsr	r25
 17e:	87 95       	ror	r24
 180:	9c 01       	movw	r18, r24
 182:	22 0f       	add	r18, r18
 184:	33 1f       	adc	r19, r19
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	82 0f       	add	r24, r18
 194:	93 1f       	adc	r25, r19
 196:	9e 01       	movw	r18, r28
 198:	28 1b       	sub	r18, r24
 19a:	39 0b       	sbc	r19, r25
 19c:	f9 01       	movw	r30, r18
 19e:	e0 5a       	subi	r30, 0xA0	; 160
 1a0:	ff 4f       	sbci	r31, 0xFF	; 255
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	80 81       	ld	r24, Z
 1a6:	0e 94 50 00 	call	0xa0	; 0xa0 <SSD_Number_Display>
 1aa:	8f e3       	ldi	r24, 0x3F	; 63
 1ac:	9c e9       	ldi	r25, 0x9C	; 156
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <SSD_Number_Set+0xa2>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <SSD_Number_Set+0xa8>
 1b4:	00 00       	nop
	_delay_ms(10);
}
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <main>:
#include "SSD.h"
#include "ATmega32A_Configuration.h"

int main(void)
{
	SSD_Init();
 1bc:	0e 94 41 00 	call	0x82	; 0x82 <SSD_Init>
	while (1)
	{
		SSD_Number_Set(50);
 1c0:	82 e3       	ldi	r24, 0x32	; 50
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 86 00 	call	0x10c	; 0x10c <SSD_Number_Set>
 1c8:	fb cf       	rjmp	.-10     	; 0x1c0 <main+0x4>

000001ca <Dio_ChannelDirectionSet>:

DioPinStateEnum_t Dio_ChannelRead(volatile uint8* port_reg, DioPinEnum_t channel)
{
	DioPinStateEnum_t u8LocalPinValue = READ_BIT(*port_reg, channel);
	return (u8LocalPinValue);
}
 1ca:	44 23       	and	r20, r20
 1cc:	19 f0       	breq	.+6      	; 0x1d4 <Dio_ChannelDirectionSet+0xa>
 1ce:	41 30       	cpi	r20, 0x01	; 1
 1d0:	71 f0       	breq	.+28     	; 0x1ee <Dio_ChannelDirectionSet+0x24>
 1d2:	08 95       	ret
 1d4:	fc 01       	movw	r30, r24
 1d6:	40 81       	ld	r20, Z
 1d8:	21 e0       	ldi	r18, 0x01	; 1
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <Dio_ChannelDirectionSet+0x18>
 1de:	22 0f       	add	r18, r18
 1e0:	33 1f       	adc	r19, r19
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <Dio_ChannelDirectionSet+0x14>
 1e6:	20 95       	com	r18
 1e8:	24 23       	and	r18, r20
 1ea:	20 83       	st	Z, r18
 1ec:	08 95       	ret
 1ee:	fc 01       	movw	r30, r24
 1f0:	40 81       	ld	r20, Z
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <Dio_ChannelDirectionSet+0x32>
 1f8:	22 0f       	add	r18, r18
 1fa:	33 1f       	adc	r19, r19
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <Dio_ChannelDirectionSet+0x2e>
 200:	24 2b       	or	r18, r20
 202:	20 83       	st	Z, r18
 204:	08 95       	ret

00000206 <Dio_ChannelWrite>:


void Dio_ChannelWrite(volatile uint8* port_reg, DioPinEnum_t channel, DioPinStateEnum_t state)
{
	switch(state)
 206:	44 23       	and	r20, r20
 208:	19 f0       	breq	.+6      	; 0x210 <Dio_ChannelWrite+0xa>
 20a:	41 30       	cpi	r20, 0x01	; 1
 20c:	71 f0       	breq	.+28     	; 0x22a <Dio_ChannelWrite+0x24>
 20e:	08 95       	ret
	{
		case DIO_LOW:
			CLEAR_BIT(*port_reg, channel);
 210:	fc 01       	movw	r30, r24
 212:	40 81       	ld	r20, Z
 214:	21 e0       	ldi	r18, 0x01	; 1
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <Dio_ChannelWrite+0x18>
 21a:	22 0f       	add	r18, r18
 21c:	33 1f       	adc	r19, r19
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <Dio_ChannelWrite+0x14>
 222:	20 95       	com	r18
 224:	24 23       	and	r18, r20
 226:	20 83       	st	Z, r18
			break;
 228:	08 95       	ret
		case DIO_HIGH:
			SET_BIT(*port_reg, channel);
 22a:	fc 01       	movw	r30, r24
 22c:	40 81       	ld	r20, Z
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <Dio_ChannelWrite+0x32>
 234:	22 0f       	add	r18, r18
 236:	33 1f       	adc	r19, r19
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <Dio_ChannelWrite+0x2e>
 23c:	24 2b       	or	r18, r20
 23e:	20 83       	st	Z, r18
 240:	08 95       	ret

00000242 <__umulhisi3>:
 242:	a2 9f       	mul	r26, r18
 244:	b0 01       	movw	r22, r0
 246:	b3 9f       	mul	r27, r19
 248:	c0 01       	movw	r24, r0
 24a:	a3 9f       	mul	r26, r19
 24c:	70 0d       	add	r23, r0
 24e:	81 1d       	adc	r24, r1
 250:	11 24       	eor	r1, r1
 252:	91 1d       	adc	r25, r1
 254:	b2 9f       	mul	r27, r18
 256:	70 0d       	add	r23, r0
 258:	81 1d       	adc	r24, r1
 25a:	11 24       	eor	r1, r1
 25c:	91 1d       	adc	r25, r1
 25e:	08 95       	ret

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
