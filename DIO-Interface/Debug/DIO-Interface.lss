
DIO-Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000246  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e5a  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085a  00000000  00000000  000011c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b4  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00001ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005db  00000000  00000000  00001fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000322  00000000  00000000  000025bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000028e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  74:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Led_Init>:
#include "LED.h"
#include "DIO.h"

void Led_Init(volatile uint8* led_reg, LedEnum_t led_no)
{
	Dio_ChannelDirectionSet(led_reg, led_no, DIO_OUTPUT);
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	0e 94 8a 00 	call	0x114	; 0x114 <Dio_ChannelDirectionSet>
  82:	08 95       	ret

00000084 <Led_State_Set>:
}


void Led_State_Set(volatile uint8* led_reg, LedEnum_t led_no, LedStateEnum_t state)
{
	if(state == LED_TOGGLE)
  84:	42 30       	cpi	r20, 0x02	; 2
  86:	19 f4       	brne	.+6      	; 0x8e <Led_State_Set+0xa>
	{
		Dio_ChannelToggle(led_reg, led_no);
  88:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Dio_ChannelToggle>
  8c:	08 95       	ret
	}
	else
	{
		Dio_ChannelWrite(led_reg, led_no, state);
  8e:	0e 94 bd 00 	call	0x17a	; 0x17a <Dio_ChannelWrite>
  92:	08 95       	ret

00000094 <Switch_Init>:

DioPinStateEnum_t SwitchPreviousState = SW_RELEASED;

void Switch_Init(volatile uint8* sw_reg, SwitchEnum_t sw_no)
{
	Dio_ChannelDirectionSet(sw_reg, sw_no, DIO_INPUT);
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	0e 94 8a 00 	call	0x114	; 0x114 <Dio_ChannelDirectionSet>
  9a:	08 95       	ret

0000009c <Switch_Get_State>:
}


SwitchStateEnum_t Switch_Get_State(volatile uint8* sw_reg, SwitchEnum_t sw_no)
{
  9c:	1f 93       	push	r17
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	ec 01       	movw	r28, r24
  a4:	16 2f       	mov	r17, r22
	SwitchStateEnum_t SwitchLocalState = SW_RELEASED;
	if(SwitchPreviousState != Dio_ChannelRead(sw_reg, sw_no))
  a6:	0e 94 a8 00 	call	0x150	; 0x150 <Dio_ChannelRead>
  aa:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ae:	89 17       	cp	r24, r25
  b0:	91 f0       	breq	.+36     	; 0xd6 <Switch_Get_State+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	89 ef       	ldi	r24, 0xF9	; 249
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <Switch_Get_State+0x1c>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <Switch_Get_State+0x26>
  c2:	00 00       	nop
	{
		_delay_ms(DEBOUNCE_PERIOD);
		SwitchPreviousState = Dio_ChannelRead(sw_reg, sw_no);
  c4:	61 2f       	mov	r22, r17
  c6:	ce 01       	movw	r24, r28
  c8:	0e 94 a8 00 	call	0x150	; 0x150 <Dio_ChannelRead>
  cc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		if(SwitchPreviousState == DIO_HIGH)
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	19 f4       	brne	.+6      	; 0xda <Switch_Get_State+0x3e>
  d4:	03 c0       	rjmp	.+6      	; 0xdc <Switch_Get_State+0x40>
}


SwitchStateEnum_t Switch_Get_State(volatile uint8* sw_reg, SwitchEnum_t sw_no)
{
	SwitchStateEnum_t SwitchLocalState = SW_RELEASED;
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	01 c0       	rjmp	.+2      	; 0xdc <Switch_Get_State+0x40>
		{
			SwitchLocalState = SW_PRESSED;
		}
		else 
		{
			SwitchLocalState = SW_RELEASED;
  da:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return SwitchLocalState;
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	1f 91       	pop	r17
  e2:	08 95       	ret

000000e4 <main>:
#include "util/delay.h"


int main(void)
{
	Led_Init(LED0_DIR_REG, LED_0);
  e4:	62 e0       	ldi	r22, 0x02	; 2
  e6:	84 e3       	ldi	r24, 0x34	; 52
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 3e 00 	call	0x7c	; 0x7c <Led_Init>
	Switch_Init(SW0_DIR_REG, SW_0);
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	87 e3       	ldi	r24, 0x37	; 55
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 4a 00 	call	0x94	; 0x94 <Switch_Init>
	
    while (1) 
    {
		SwitchStateEnum_t sw_state = Switch_Get_State(SW0_INP_REG, SW_0);
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	86 e3       	ldi	r24, 0x36	; 54
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 4e 00 	call	0x9c	; 0x9c <Switch_Get_State>
		if(sw_state == SW_PRESSED)
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	c9 f7       	brne	.-14     	; 0xf8 <main+0x14>
		{
			Led_State_Set(LED0_OUT_REG, LED_0, LED_TOGGLE);
 106:	42 e0       	ldi	r20, 0x02	; 2
 108:	62 e0       	ldi	r22, 0x02	; 2
 10a:	85 e3       	ldi	r24, 0x35	; 53
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 42 00 	call	0x84	; 0x84 <Led_State_Set>
 112:	f2 cf       	rjmp	.-28     	; 0xf8 <main+0x14>

00000114 <Dio_ChannelDirectionSet>:
#include "ATmega32A_Configuration.h"

void Dio_ChannelDirectionSet(volatile uint8* port_reg, DioPinEnum_t channel, DioPinDirectionEnum_t direction)
{

	switch(direction)
 114:	44 23       	and	r20, r20
 116:	19 f0       	breq	.+6      	; 0x11e <Dio_ChannelDirectionSet+0xa>
 118:	41 30       	cpi	r20, 0x01	; 1
 11a:	71 f0       	breq	.+28     	; 0x138 <Dio_ChannelDirectionSet+0x24>
 11c:	08 95       	ret
	{
		case DIO_INPUT:
			CLEAR_BIT(*port_reg, channel);
 11e:	fc 01       	movw	r30, r24
 120:	40 81       	ld	r20, Z
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <Dio_ChannelDirectionSet+0x18>
 128:	22 0f       	add	r18, r18
 12a:	33 1f       	adc	r19, r19
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <Dio_ChannelDirectionSet+0x14>
 130:	20 95       	com	r18
 132:	24 23       	and	r18, r20
 134:	20 83       	st	Z, r18
			break;
 136:	08 95       	ret
		case DIO_OUTPUT:
			SET_BIT(*port_reg, channel);
 138:	fc 01       	movw	r30, r24
 13a:	40 81       	ld	r20, Z
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <Dio_ChannelDirectionSet+0x32>
 142:	22 0f       	add	r18, r18
 144:	33 1f       	adc	r19, r19
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <Dio_ChannelDirectionSet+0x2e>
 14a:	24 2b       	or	r18, r20
 14c:	20 83       	st	Z, r18
 14e:	08 95       	ret

00000150 <Dio_ChannelRead>:
}


DioPinStateEnum_t Dio_ChannelRead(volatile uint8* port_reg, DioPinEnum_t channel)
{
	DioPinStateEnum_t u8LocalPinValue = READ_BIT(*port_reg, channel);
 150:	fc 01       	movw	r30, r24
 152:	40 81       	ld	r20, Z
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	9c 01       	movw	r18, r24
 15a:	06 2e       	mov	r0, r22
 15c:	02 c0       	rjmp	.+4      	; 0x162 <Dio_ChannelRead+0x12>
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <Dio_ChannelRead+0xe>
 166:	84 2f       	mov	r24, r20
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	82 23       	and	r24, r18
 16c:	93 23       	and	r25, r19
 16e:	02 c0       	rjmp	.+4      	; 0x174 <Dio_ChannelRead+0x24>
 170:	96 95       	lsr	r25
 172:	87 95       	ror	r24
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <Dio_ChannelRead+0x20>
	return (u8LocalPinValue);
}
 178:	08 95       	ret

0000017a <Dio_ChannelWrite>:


void Dio_ChannelWrite(volatile uint8* port_reg, DioPinEnum_t channel, DioPinStateEnum_t state)
{
	switch(state)
 17a:	44 23       	and	r20, r20
 17c:	19 f0       	breq	.+6      	; 0x184 <Dio_ChannelWrite+0xa>
 17e:	41 30       	cpi	r20, 0x01	; 1
 180:	71 f0       	breq	.+28     	; 0x19e <Dio_ChannelWrite+0x24>
 182:	08 95       	ret
	{
		case DIO_LOW:
			CLEAR_BIT(*port_reg, channel);
 184:	fc 01       	movw	r30, r24
 186:	40 81       	ld	r20, Z
 188:	21 e0       	ldi	r18, 0x01	; 1
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <Dio_ChannelWrite+0x18>
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <Dio_ChannelWrite+0x14>
 196:	20 95       	com	r18
 198:	24 23       	and	r18, r20
 19a:	20 83       	st	Z, r18
			break;
 19c:	08 95       	ret
		case DIO_HIGH:
			SET_BIT(*port_reg, channel);
 19e:	fc 01       	movw	r30, r24
 1a0:	40 81       	ld	r20, Z
 1a2:	21 e0       	ldi	r18, 0x01	; 1
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <Dio_ChannelWrite+0x32>
 1a8:	22 0f       	add	r18, r18
 1aa:	33 1f       	adc	r19, r19
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <Dio_ChannelWrite+0x2e>
 1b0:	24 2b       	or	r18, r20
 1b2:	20 83       	st	Z, r18
 1b4:	08 95       	ret

000001b6 <Dio_ChannelToggle>:
}


void Dio_ChannelToggle(volatile uint8* port_reg, DioPinEnum_t channel)
{
	TOGGLE_BIT(*port_reg, channel);
 1b6:	fc 01       	movw	r30, r24
 1b8:	40 81       	ld	r20, Z
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <Dio_ChannelToggle+0xe>
 1c0:	22 0f       	add	r18, r18
 1c2:	33 1f       	adc	r19, r19
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <Dio_ChannelToggle+0xa>
 1c8:	24 27       	eor	r18, r20
 1ca:	20 83       	st	Z, r18
 1cc:	08 95       	ret

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
