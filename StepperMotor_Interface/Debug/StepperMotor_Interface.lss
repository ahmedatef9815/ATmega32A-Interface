
StepperMotor_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000220  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000220  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800064  00800064  000002b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ef9  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c4  00000000  00000000  000012dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000621  00000000  00000000  00001ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  000021c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000622  00000000  00000000  000022e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002de  00000000  00000000  00002906  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002be4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  8a:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <StepperMotorInit>:
#endif


void StepperMotorInit(void)
{
	Dio_ChannelDirectionSet(STEPPER_MOTOR_DIR_REG, STEPPER_MOTOR_IN1_PIN, DIO_OUTPUT);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	64 e0       	ldi	r22, 0x04	; 4
  96:	8a e3       	ldi	r24, 0x3A	; 58
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(STEPPER_MOTOR_DIR_REG, STEPPER_MOTOR_IN2_PIN, DIO_OUTPUT);
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	65 e0       	ldi	r22, 0x05	; 5
  a2:	8a e3       	ldi	r24, 0x3A	; 58
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(STEPPER_MOTOR_DIR_REG, STEPPER_MOTOR_IN3_PIN, DIO_OUTPUT);
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	66 e0       	ldi	r22, 0x06	; 6
  ae:	8a e3       	ldi	r24, 0x3A	; 58
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(STEPPER_MOTOR_DIR_REG, STEPPER_MOTOR_IN4_PIN, DIO_OUTPUT);
  b6:	41 e0       	ldi	r20, 0x01	; 1
  b8:	67 e0       	ldi	r22, 0x07	; 7
  ba:	8a e3       	ldi	r24, 0x3A	; 58
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Dio_ChannelDirectionSet>
  c2:	08 95       	ret

000000c4 <StepperMotorTurnCounterClockwise>:
}

void StepperMotorTurnCounterClockwise(void)
{
	uint8 u8LocalLoopIndex;
	for (u8LocalLoopIndex = 0U; u8LocalLoopIndex < STEPPER_MOTOR_COILS_NUM; u8LocalLoopIndex++)
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	12 c0       	rjmp	.+36     	; 0xec <StepperMotorTurnCounterClockwise+0x28>
	{
		#if STEPPER_UPPER_PORT
		*STEPPER_MOTOR_OUT_REG &= 0x0FU;     
  c8:	9b b3       	in	r25, 0x1b	; 27
  ca:	9f 70       	andi	r25, 0x0F	; 15
  cc:	9b bb       	out	0x1b, r25	; 27
		#else
		*STEPPER_MOTOR_OUT_REG &= 0xF0U;
		#endif
		             
		*STEPPER_MOTOR_OUT_REG |= gau8StepperRotation[u8LocalLoopIndex];
  ce:	2b b3       	in	r18, 0x1b	; 27
  d0:	e8 2f       	mov	r30, r24
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	e0 5a       	subi	r30, 0xA0	; 160
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	90 81       	ld	r25, Z
  da:	92 2b       	or	r25, r18
  dc:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	ef e1       	ldi	r30, 0x1F	; 31
  e0:	fe e4       	ldi	r31, 0x4E	; 78
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <StepperMotorTurnCounterClockwise+0x1e>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <StepperMotorTurnCounterClockwise+0x24>
  e8:	00 00       	nop
}

void StepperMotorTurnCounterClockwise(void)
{
	uint8 u8LocalLoopIndex;
	for (u8LocalLoopIndex = 0U; u8LocalLoopIndex < STEPPER_MOTOR_COILS_NUM; u8LocalLoopIndex++)
  ea:	8f 5f       	subi	r24, 0xFF	; 255
  ec:	84 30       	cpi	r24, 0x04	; 4
  ee:	60 f3       	brcs	.-40     	; 0xc8 <StepperMotorTurnCounterClockwise+0x4>
		             
		*STEPPER_MOTOR_OUT_REG |= gau8StepperRotation[u8LocalLoopIndex];
		_delay_ms(STEPPER_MOTOR_STEP_DELAY_MS);
	}
		
}
  f0:	08 95       	ret

000000f2 <StepperMotorTurnClockwise>:

void StepperMotorTurnClockwise(void)
{
	sint8 s8LocalLoopIndex;
	for (s8LocalLoopIndex = (STEPPER_MOTOR_COILS_NUM - 1); s8LocalLoopIndex >= 0; s8LocalLoopIndex--)
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	14 c0       	rjmp	.+40     	; 0x11e <StepperMotorTurnClockwise+0x2c>
	{
		#if STEPPER_UPPER_PORT
		*STEPPER_MOTOR_OUT_REG &= 0x0FU;         
  f6:	9b b3       	in	r25, 0x1b	; 27
  f8:	9f 70       	andi	r25, 0x0F	; 15
  fa:	9b bb       	out	0x1b, r25	; 27
		#else 
		*STEPPER_MOTOR_OUT_REG &= 0xF0U;
		#endif
		              
		*STEPPER_MOTOR_OUT_REG |= gau8StepperRotation[s8LocalLoopIndex];
  fc:	2b b3       	in	r18, 0x1b	; 27
  fe:	e8 2f       	mov	r30, r24
 100:	08 2e       	mov	r0, r24
 102:	00 0c       	add	r0, r0
 104:	ff 0b       	sbc	r31, r31
 106:	e0 5a       	subi	r30, 0xA0	; 160
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	90 81       	ld	r25, Z
 10c:	92 2b       	or	r25, r18
 10e:	9b bb       	out	0x1b, r25	; 27
 110:	ef e1       	ldi	r30, 0x1F	; 31
 112:	fe e4       	ldi	r31, 0x4E	; 78
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <StepperMotorTurnClockwise+0x22>
 118:	00 c0       	rjmp	.+0      	; 0x11a <StepperMotorTurnClockwise+0x28>
 11a:	00 00       	nop
}

void StepperMotorTurnClockwise(void)
{
	sint8 s8LocalLoopIndex;
	for (s8LocalLoopIndex = (STEPPER_MOTOR_COILS_NUM - 1); s8LocalLoopIndex >= 0; s8LocalLoopIndex--)
 11c:	81 50       	subi	r24, 0x01	; 1
 11e:	88 23       	and	r24, r24
 120:	54 f7       	brge	.-44     	; 0xf6 <StepperMotorTurnClockwise+0x4>
		#endif
		              
		*STEPPER_MOTOR_OUT_REG |= gau8StepperRotation[s8LocalLoopIndex];
		_delay_ms(STEPPER_MOTOR_STEP_DELAY_MS);
	}
}
 122:	08 95       	ret

00000124 <Switch_Init>:

DioPinStateEnum_t SwitchPreviousState = SW_RELEASED;

void Switch_Init(volatile uint8* sw_reg, SwitchEnum_t sw_no)
{
	Dio_ChannelDirectionSet(sw_reg, sw_no, DIO_INPUT);
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Dio_ChannelDirectionSet>
 12a:	08 95       	ret

0000012c <Switch_Get_State>:
}


SwitchStateEnum_t Switch_Get_State(volatile uint8* sw_reg, SwitchEnum_t sw_no)
{
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
 134:	16 2f       	mov	r17, r22
	SwitchStateEnum_t SwitchLocalState = SW_RELEASED;
	if(SwitchPreviousState != Dio_ChannelRead(sw_reg, sw_no))
 136:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Dio_ChannelRead>
 13a:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <__data_end>
 13e:	89 17       	cp	r24, r25
 140:	91 f0       	breq	.+36     	; 0x166 <Switch_Get_State+0x3a>
 142:	2f ef       	ldi	r18, 0xFF	; 255
 144:	89 ef       	ldi	r24, 0xF9	; 249
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <Switch_Get_State+0x1c>
 150:	00 c0       	rjmp	.+0      	; 0x152 <Switch_Get_State+0x26>
 152:	00 00       	nop
	{
		_delay_ms(DEBOUNCE_PERIOD);
		SwitchPreviousState = Dio_ChannelRead(sw_reg, sw_no);
 154:	61 2f       	mov	r22, r17
 156:	ce 01       	movw	r24, r28
 158:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Dio_ChannelRead>
 15c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
		if(SwitchPreviousState == DIO_HIGH)
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	19 f4       	brne	.+6      	; 0x16a <Switch_Get_State+0x3e>
 164:	03 c0       	rjmp	.+6      	; 0x16c <Switch_Get_State+0x40>
}


SwitchStateEnum_t Switch_Get_State(volatile uint8* sw_reg, SwitchEnum_t sw_no)
{
	SwitchStateEnum_t SwitchLocalState = SW_RELEASED;
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	01 c0       	rjmp	.+2      	; 0x16c <Switch_Get_State+0x40>
		{
			SwitchLocalState = SW_PRESSED;
		}
		else 
		{
			SwitchLocalState = SW_RELEASED;
 16a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return SwitchLocalState;
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	08 95       	ret

00000174 <main>:
#include "SW.h"


int main(void)
{
	StepperMotorInit();
 174:	0e 94 49 00 	call	0x92	; 0x92 <StepperMotorInit>
	Switch_Init(SW0_DIR_REG, SW_1);
 178:	66 e0       	ldi	r22, 0x06	; 6
 17a:	87 e3       	ldi	r24, 0x37	; 55
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 92 00 	call	0x124	; 0x124 <Switch_Init>
	Switch_Init(SW1_DIR_REG, SW_2);
 182:	62 e0       	ldi	r22, 0x02	; 2
 184:	81 e3       	ldi	r24, 0x31	; 49
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 92 00 	call	0x124	; 0x124 <Switch_Init>
 18c:	02 c0       	rjmp	.+4      	; 0x192 <main+0x1e>
		
    while (1) 
    {
		while(Switch_Get_State(SW1_INP_REG, SW_1) == SW_PRESSED)
		{
			StepperMotorTurnClockwise();
 18e:	0e 94 79 00 	call	0xf2	; 0xf2 <StepperMotorTurnClockwise>
	Switch_Init(SW0_DIR_REG, SW_1);
	Switch_Init(SW1_DIR_REG, SW_2);
		
    while (1) 
    {
		while(Switch_Get_State(SW1_INP_REG, SW_1) == SW_PRESSED)
 192:	66 e0       	ldi	r22, 0x06	; 6
 194:	80 e3       	ldi	r24, 0x30	; 48
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 96 00 	call	0x12c	; 0x12c <Switch_Get_State>
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	19 f4       	brne	.+6      	; 0x1a6 <main+0x32>
 1a0:	f6 cf       	rjmp	.-20     	; 0x18e <main+0x1a>
		{
			StepperMotorTurnClockwise();
		}
		while(Switch_Get_State(SW2_INP_REG, SW_2) == SW_PRESSED)
		{
			StepperMotorTurnCounterClockwise();
 1a2:	0e 94 62 00 	call	0xc4	; 0xc4 <StepperMotorTurnCounterClockwise>
    {
		while(Switch_Get_State(SW1_INP_REG, SW_1) == SW_PRESSED)
		{
			StepperMotorTurnClockwise();
		}
		while(Switch_Get_State(SW2_INP_REG, SW_2) == SW_PRESSED)
 1a6:	62 e0       	ldi	r22, 0x02	; 2
 1a8:	80 e3       	ldi	r24, 0x30	; 48
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 96 00 	call	0x12c	; 0x12c <Switch_Get_State>
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	b9 f3       	breq	.-18     	; 0x1a2 <main+0x2e>
 1b4:	ee cf       	rjmp	.-36     	; 0x192 <main+0x1e>

000001b6 <Dio_ChannelDirectionSet>:
#include "ATmega32A_Configuration.h"

void Dio_ChannelDirectionSet(volatile uint8* port_reg, DioPinEnum_t channel, DioPinDirectionEnum_t direction)
{

	switch(direction)
 1b6:	44 23       	and	r20, r20
 1b8:	19 f0       	breq	.+6      	; 0x1c0 <Dio_ChannelDirectionSet+0xa>
 1ba:	41 30       	cpi	r20, 0x01	; 1
 1bc:	71 f0       	breq	.+28     	; 0x1da <Dio_ChannelDirectionSet+0x24>
 1be:	08 95       	ret
	{
		case DIO_INPUT:
			CLEAR_BIT(*port_reg, channel);
 1c0:	fc 01       	movw	r30, r24
 1c2:	40 81       	ld	r20, Z
 1c4:	21 e0       	ldi	r18, 0x01	; 1
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <Dio_ChannelDirectionSet+0x18>
 1ca:	22 0f       	add	r18, r18
 1cc:	33 1f       	adc	r19, r19
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <Dio_ChannelDirectionSet+0x14>
 1d2:	20 95       	com	r18
 1d4:	24 23       	and	r18, r20
 1d6:	20 83       	st	Z, r18
			break;
 1d8:	08 95       	ret
		case DIO_OUTPUT:
			SET_BIT(*port_reg, channel);
 1da:	fc 01       	movw	r30, r24
 1dc:	40 81       	ld	r20, Z
 1de:	21 e0       	ldi	r18, 0x01	; 1
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <Dio_ChannelDirectionSet+0x32>
 1e4:	22 0f       	add	r18, r18
 1e6:	33 1f       	adc	r19, r19
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <Dio_ChannelDirectionSet+0x2e>
 1ec:	24 2b       	or	r18, r20
 1ee:	20 83       	st	Z, r18
 1f0:	08 95       	ret

000001f2 <Dio_ChannelRead>:
}


DioPinStateEnum_t Dio_ChannelRead(volatile uint8* port_reg, DioPinEnum_t channel)
{
	DioPinStateEnum_t u8LocalPinValue = READ_BIT(*port_reg, channel);
 1f2:	fc 01       	movw	r30, r24
 1f4:	40 81       	ld	r20, Z
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	9c 01       	movw	r18, r24
 1fc:	06 2e       	mov	r0, r22
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <Dio_ChannelRead+0x12>
 200:	22 0f       	add	r18, r18
 202:	33 1f       	adc	r19, r19
 204:	0a 94       	dec	r0
 206:	e2 f7       	brpl	.-8      	; 0x200 <Dio_ChannelRead+0xe>
 208:	84 2f       	mov	r24, r20
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	82 23       	and	r24, r18
 20e:	93 23       	and	r25, r19
 210:	02 c0       	rjmp	.+4      	; 0x216 <Dio_ChannelRead+0x24>
 212:	96 95       	lsr	r25
 214:	87 95       	ror	r24
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <Dio_ChannelRead+0x20>
	return (u8LocalPinValue);
}
 21a:	08 95       	ret

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
