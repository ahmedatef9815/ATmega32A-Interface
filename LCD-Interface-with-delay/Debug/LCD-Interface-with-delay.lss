
LCD-Interface-with-delay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000003fa  0000046e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000047a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001277  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000801  00000000  00000000  00001817  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005fc  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000014c  00000000  00000000  00002614  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005be  00000000  00000000  00002760  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007a2  00000000  00000000  00002d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000034c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 6e 01 	call	0x2dc	; 0x2dc <main>
  7a:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Send_Instruction>:
}


void LCD_Clear(void)
{
	LCD_Send_Instruction(LCD_CLEAR_DISPLAY);
  82:	cf 93       	push	r28
  84:	c8 2f       	mov	r28, r24
  86:	40 e0       	ldi	r20, 0x00	; 0
  88:	61 e0       	ldi	r22, 0x01	; 1
  8a:	88 e3       	ldi	r24, 0x38	; 56
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 a8 01 	call	0x350	; 0x350 <Dio_ChannelWrite>
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	88 e3       	ldi	r24, 0x38	; 56
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 a8 01 	call	0x350	; 0x350 <Dio_ChannelWrite>
  9e:	8f e9       	ldi	r24, 0x9F	; 159
  a0:	9f e0       	ldi	r25, 0x0F	; 15
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_Send_Instruction+0x20>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCD_Send_Instruction+0x26>
  a8:	00 00       	nop
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	63 e0       	ldi	r22, 0x03	; 3
  ae:	88 e3       	ldi	r24, 0x38	; 56
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 a8 01 	call	0x350	; 0x350 <Dio_ChannelWrite>
  b6:	8f e9       	ldi	r24, 0x9F	; 159
  b8:	9f e0       	ldi	r25, 0x0F	; 15
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <LCD_Send_Instruction+0x38>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <LCD_Send_Instruction+0x3e>
  c0:	00 00       	nop
  c2:	8b b3       	in	r24, 0x1b	; 27
  c4:	8f 70       	andi	r24, 0x0F	; 15
  c6:	8b bb       	out	0x1b, r24	; 27
  c8:	8b b3       	in	r24, 0x1b	; 27
  ca:	9c 2f       	mov	r25, r28
  cc:	90 7f       	andi	r25, 0xF0	; 240
  ce:	89 2b       	or	r24, r25
  d0:	8b bb       	out	0x1b, r24	; 27
  d2:	8f e9       	ldi	r24, 0x9F	; 159
  d4:	9f e0       	ldi	r25, 0x0F	; 15
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LCD_Send_Instruction+0x54>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LCD_Send_Instruction+0x5a>
  dc:	00 00       	nop
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	63 e0       	ldi	r22, 0x03	; 3
  e2:	88 e3       	ldi	r24, 0x38	; 56
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 a8 01 	call	0x350	; 0x350 <Dio_ChannelWrite>
  ea:	8f e9       	ldi	r24, 0x9F	; 159
  ec:	9f e0       	ldi	r25, 0x0F	; 15
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_Send_Instruction+0x6c>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCD_Send_Instruction+0x72>
  f4:	00 00       	nop
  f6:	41 e0       	ldi	r20, 0x01	; 1
  f8:	63 e0       	ldi	r22, 0x03	; 3
  fa:	88 e3       	ldi	r24, 0x38	; 56
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 a8 01 	call	0x350	; 0x350 <Dio_ChannelWrite>
 102:	8f e9       	ldi	r24, 0x9F	; 159
 104:	9f e0       	ldi	r25, 0x0F	; 15
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_Send_Instruction+0x84>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_Send_Instruction+0x8a>
 10c:	00 00       	nop
 10e:	8b b3       	in	r24, 0x1b	; 27
 110:	8f 70       	andi	r24, 0x0F	; 15
 112:	8b bb       	out	0x1b, r24	; 27
 114:	8b b3       	in	r24, 0x1b	; 27
 116:	c2 95       	swap	r28
 118:	c0 7f       	andi	r28, 0xF0	; 240
 11a:	c8 2b       	or	r28, r24
 11c:	cb bb       	out	0x1b, r28	; 27
 11e:	8f e9       	ldi	r24, 0x9F	; 159
 120:	9f e0       	ldi	r25, 0x0F	; 15
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_Send_Instruction+0xa0>
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_Send_Instruction+0xa6>
 128:	00 00       	nop
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	63 e0       	ldi	r22, 0x03	; 3
 12e:	88 e3       	ldi	r24, 0x38	; 56
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 a8 01 	call	0x350	; 0x350 <Dio_ChannelWrite>
 136:	8f e9       	ldi	r24, 0x9F	; 159
 138:	9f e0       	ldi	r25, 0x0F	; 15
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_Send_Instruction+0xb8>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCD_Send_Instruction+0xbe>
 140:	00 00       	nop
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <LCD_Init>:
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	89 ef       	ldi	r24, 0xF9	; 249
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <LCD_Init+0x6>
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_Init+0x10>
 156:	00 00       	nop
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	87 e3       	ldi	r24, 0x37	; 55
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 8a 01 	call	0x314	; 0x314 <Dio_ChannelDirectionSet>
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	62 e0       	ldi	r22, 0x02	; 2
 168:	87 e3       	ldi	r24, 0x37	; 55
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 8a 01 	call	0x314	; 0x314 <Dio_ChannelDirectionSet>
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	63 e0       	ldi	r22, 0x03	; 3
 174:	87 e3       	ldi	r24, 0x37	; 55
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 8a 01 	call	0x314	; 0x314 <Dio_ChannelDirectionSet>
 17c:	8a b3       	in	r24, 0x1a	; 26
 17e:	80 6f       	ori	r24, 0xF0	; 240
 180:	8a bb       	out	0x1a, r24	; 26
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Send_Instruction>
 188:	88 e2       	ldi	r24, 0x28	; 40
 18a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Send_Instruction>
 18e:	8c e0       	ldi	r24, 0x0C	; 12
 190:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Send_Instruction>
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Send_Instruction>
 19a:	08 95       	ret

0000019c <LCD_RowCol_Select>:


void LCD_RowCol_Select(uint8 row, uint8 col)
{
	uint8 u8LocalLineAddress = 0U;
	switch(row)
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	39 f0       	breq	.+14     	; 0x1ae <LCD_RowCol_Select+0x12>
 1a0:	58 f0       	brcs	.+22     	; 0x1b8 <LCD_RowCol_Select+0x1c>
 1a2:	82 30       	cpi	r24, 0x02	; 2
 1a4:	31 f0       	breq	.+12     	; 0x1b2 <LCD_RowCol_Select+0x16>
 1a6:	83 30       	cpi	r24, 0x03	; 3
 1a8:	31 f0       	breq	.+12     	; 0x1b6 <LCD_RowCol_Select+0x1a>
}


void LCD_RowCol_Select(uint8 row, uint8 col)
{
	uint8 u8LocalLineAddress = 0U;
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <LCD_RowCol_Select+0x1c>
		case 0:
			// When Writing To LCD 1st Col The Base Address is 0x00
			u8LocalLineAddress = col | LCD_1ST_LINE_BASE;
			break;
		case 1:
			u8LocalLineAddress = col | LCD_2ND_LINE_BASE;
 1ae:	60 64       	ori	r22, 0x40	; 64
			break;
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <LCD_RowCol_Select+0x1c>
		case 2:
			u8LocalLineAddress = col | LCD_3RD_LINE_BASE;
 1b2:	60 61       	ori	r22, 0x10	; 16
			break;
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <LCD_RowCol_Select+0x1c>
		case 3:
			u8LocalLineAddress = col | LCD_4TH_LINE_BASE;
 1b6:	60 65       	ori	r22, 0x50	; 80
			break;
		default:
			break;
	}
	LCD_Send_Instruction(LCD_DDRAM_CONST | u8LocalLineAddress);
 1b8:	86 2f       	mov	r24, r22
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Send_Instruction>
 1c0:	08 95       	ret

000001c2 <LCD_Char_Display>:
}


void LCD_Char_Display(uint8 data)
{
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	c8 2f       	mov	r28, r24
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_RS, DIO_HIGH);
 1c8:	41 e0       	ldi	r20, 0x01	; 1
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	88 e3       	ldi	r24, 0x38	; 56
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 a8 01 	call	0x350	; 0x350 <Dio_ChannelWrite>
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_RW, DIO_LOW);
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	88 e3       	ldi	r24, 0x38	; 56
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 a8 01 	call	0x350	; 0x350 <Dio_ChannelWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	8f e9       	ldi	r24, 0x9F	; 159
 1e2:	9f e0       	ldi	r25, 0x0F	; 15
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCD_Char_Display+0x22>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <LCD_Char_Display+0x28>
 1ea:	00 00       	nop
	_delay_ms(1);
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_LOW);
	_delay_ms(1);
	
	#else
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_HIGH);
 1ec:	41 e0       	ldi	r20, 0x01	; 1
 1ee:	63 e0       	ldi	r22, 0x03	; 3
 1f0:	88 e3       	ldi	r24, 0x38	; 56
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 a8 01 	call	0x350	; 0x350 <Dio_ChannelWrite>
 1f8:	8f e9       	ldi	r24, 0x9F	; 159
 1fa:	9f e0       	ldi	r25, 0x0F	; 15
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCD_Char_Display+0x3a>
 200:	00 c0       	rjmp	.+0      	; 0x202 <LCD_Char_Display+0x40>
 202:	00 00       	nop
	_delay_ms(1);
	*LCD_DATA_OUT_REG = 0x0FU;
 204:	df e0       	ldi	r29, 0x0F	; 15
 206:	db bb       	out	0x1b, r29	; 27
	*LCD_DATA_OUT_REG |= (data & 0xF0U);
 208:	8b b3       	in	r24, 0x1b	; 27
 20a:	9c 2f       	mov	r25, r28
 20c:	90 7f       	andi	r25, 0xF0	; 240
 20e:	89 2b       	or	r24, r25
 210:	8b bb       	out	0x1b, r24	; 27
 212:	8f e9       	ldi	r24, 0x9F	; 159
 214:	9f e0       	ldi	r25, 0x0F	; 15
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <LCD_Char_Display+0x54>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_Char_Display+0x5a>
 21c:	00 00       	nop
	_delay_ms(1);
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_LOW);
 21e:	40 e0       	ldi	r20, 0x00	; 0
 220:	63 e0       	ldi	r22, 0x03	; 3
 222:	88 e3       	ldi	r24, 0x38	; 56
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 a8 01 	call	0x350	; 0x350 <Dio_ChannelWrite>
 22a:	8f e9       	ldi	r24, 0x9F	; 159
 22c:	9f e0       	ldi	r25, 0x0F	; 15
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <LCD_Char_Display+0x6c>
 232:	00 c0       	rjmp	.+0      	; 0x234 <LCD_Char_Display+0x72>
 234:	00 00       	nop
	_delay_ms(1);
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_HIGH);
 236:	41 e0       	ldi	r20, 0x01	; 1
 238:	63 e0       	ldi	r22, 0x03	; 3
 23a:	88 e3       	ldi	r24, 0x38	; 56
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 a8 01 	call	0x350	; 0x350 <Dio_ChannelWrite>
 242:	8f e9       	ldi	r24, 0x9F	; 159
 244:	9f e0       	ldi	r25, 0x0F	; 15
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <LCD_Char_Display+0x84>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <LCD_Char_Display+0x8a>
 24c:	00 00       	nop
	_delay_ms(1);
	*LCD_DATA_OUT_REG = 0x0FU;
 24e:	db bb       	out	0x1b, r29	; 27
	*LCD_DATA_OUT_REG |= (data << 4) & 0xF0U;
 250:	8b b3       	in	r24, 0x1b	; 27
 252:	c2 95       	swap	r28
 254:	c0 7f       	andi	r28, 0xF0	; 240
 256:	c8 2b       	or	r28, r24
 258:	cb bb       	out	0x1b, r28	; 27
 25a:	8f e9       	ldi	r24, 0x9F	; 159
 25c:	9f e0       	ldi	r25, 0x0F	; 15
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <LCD_Char_Display+0x9c>
 262:	00 c0       	rjmp	.+0      	; 0x264 <LCD_Char_Display+0xa2>
 264:	00 00       	nop
	_delay_ms(1);
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_LOW);
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	63 e0       	ldi	r22, 0x03	; 3
 26a:	88 e3       	ldi	r24, 0x38	; 56
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 a8 01 	call	0x350	; 0x350 <Dio_ChannelWrite>
 272:	8f e9       	ldi	r24, 0x9F	; 159
 274:	9f e0       	ldi	r25, 0x0F	; 15
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <LCD_Char_Display+0xb4>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <LCD_Char_Display+0xba>
 27c:	00 00       	nop
	_delay_ms(1);
	
	#endif
}
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <LCD_String_Display>:


void LCD_String_Display(char* string)
{
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	ec 01       	movw	r28, r24
	while(*string != '\0')
 28a:	03 c0       	rjmp	.+6      	; 0x292 <LCD_String_Display+0xe>
	{
		LCD_Char_Display(*string);
 28c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_Char_Display>
		string++;
 290:	21 96       	adiw	r28, 0x01	; 1
}


void LCD_String_Display(char* string)
{
	while(*string != '\0')
 292:	88 81       	ld	r24, Y
 294:	81 11       	cpse	r24, r1
 296:	fa cf       	rjmp	.-12     	; 0x28c <LCD_String_Display+0x8>
	{
		LCD_Char_Display(*string);
		string++;
	}
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <LCD_Integer_Display>:


void LCD_Integer_Display(sint32 data)
{
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
 2a6:	61 97       	sbiw	r28, 0x11	; 17
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	f8 94       	cli
 2ac:	de bf       	out	0x3e, r29	; 62
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	cd bf       	out	0x3d, r28	; 61
 2b2:	dc 01       	movw	r26, r24
 2b4:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2b6:	4a e0       	ldi	r20, 0x0A	; 10
 2b8:	be 01       	movw	r22, r28
 2ba:	6f 5f       	subi	r22, 0xFF	; 255
 2bc:	7f 4f       	sbci	r23, 0xFF	; 255
 2be:	0e 94 c6 01 	call	0x38c	; 0x38c <__itoa_ncheck>
	// String to hold the ascii result
	char u8LocalResult[17];
	itoa(data, u8LocalResult, 10);
	LCD_String_Display(u8LocalResult);
 2c2:	ce 01       	movw	r24, r28
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	0e 94 42 01 	call	0x284	; 0x284 <LCD_String_Display>
}
 2ca:	61 96       	adiw	r28, 0x11	; 17
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <main>:
#include "ATmega32A_Configuration.h"
#include "util/delay.h"

int main(void)
{
	LCD_Init();
 2dc:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_Init>
    while (1) 
    {
		LCD_SHIFT(LCD_SHIFT_LEFT);
 2e0:	88 e1       	ldi	r24, 0x18	; 24
 2e2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Send_Instruction>
		LCD_RowCol_Select(0, 5);
 2e6:	65 e0       	ldi	r22, 0x05	; 5
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_RowCol_Select>
		LCD_String_Display("3atef");
 2ee:	80 e6       	ldi	r24, 0x60	; 96
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 42 01 	call	0x284	; 0x284 <LCD_String_Display>
		LCD_RowCol_Select(1, 0);
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_RowCol_Select>
		LCD_String_Display("World");
 2fe:	86 e6       	ldi	r24, 0x66	; 102
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 42 01 	call	0x284	; 0x284 <LCD_String_Display>
		LCD_Integer_Display(101);
 306:	65 e6       	ldi	r22, 0x65	; 101
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_Integer_Display>
 312:	e6 cf       	rjmp	.-52     	; 0x2e0 <main+0x4>

00000314 <Dio_ChannelDirectionSet>:

DioPinStateEnum_t Dio_ChannelRead(volatile uint8* port_reg, DioPinEnum_t channel)
{
	DioPinStateEnum_t u8LocalPinValue = READ_BIT(*port_reg, channel);
	return (u8LocalPinValue);
}
 314:	44 23       	and	r20, r20
 316:	19 f0       	breq	.+6      	; 0x31e <Dio_ChannelDirectionSet+0xa>
 318:	41 30       	cpi	r20, 0x01	; 1
 31a:	71 f0       	breq	.+28     	; 0x338 <Dio_ChannelDirectionSet+0x24>
 31c:	08 95       	ret
 31e:	fc 01       	movw	r30, r24
 320:	40 81       	ld	r20, Z
 322:	21 e0       	ldi	r18, 0x01	; 1
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <Dio_ChannelDirectionSet+0x18>
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <Dio_ChannelDirectionSet+0x14>
 330:	20 95       	com	r18
 332:	24 23       	and	r18, r20
 334:	20 83       	st	Z, r18
 336:	08 95       	ret
 338:	fc 01       	movw	r30, r24
 33a:	40 81       	ld	r20, Z
 33c:	21 e0       	ldi	r18, 0x01	; 1
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <Dio_ChannelDirectionSet+0x32>
 342:	22 0f       	add	r18, r18
 344:	33 1f       	adc	r19, r19
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <Dio_ChannelDirectionSet+0x2e>
 34a:	24 2b       	or	r18, r20
 34c:	20 83       	st	Z, r18
 34e:	08 95       	ret

00000350 <Dio_ChannelWrite>:


void Dio_ChannelWrite(volatile uint8* port_reg, DioPinEnum_t channel, DioPinStateEnum_t state)
{
	switch(state)
 350:	44 23       	and	r20, r20
 352:	19 f0       	breq	.+6      	; 0x35a <Dio_ChannelWrite+0xa>
 354:	41 30       	cpi	r20, 0x01	; 1
 356:	71 f0       	breq	.+28     	; 0x374 <Dio_ChannelWrite+0x24>
 358:	08 95       	ret
	{
		case DIO_LOW:
			CLEAR_BIT(*port_reg, channel);
 35a:	fc 01       	movw	r30, r24
 35c:	40 81       	ld	r20, Z
 35e:	21 e0       	ldi	r18, 0x01	; 1
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	02 c0       	rjmp	.+4      	; 0x368 <Dio_ChannelWrite+0x18>
 364:	22 0f       	add	r18, r18
 366:	33 1f       	adc	r19, r19
 368:	6a 95       	dec	r22
 36a:	e2 f7       	brpl	.-8      	; 0x364 <Dio_ChannelWrite+0x14>
 36c:	20 95       	com	r18
 36e:	24 23       	and	r18, r20
 370:	20 83       	st	Z, r18
			break;
 372:	08 95       	ret
		case DIO_HIGH:
			SET_BIT(*port_reg, channel);
 374:	fc 01       	movw	r30, r24
 376:	40 81       	ld	r20, Z
 378:	21 e0       	ldi	r18, 0x01	; 1
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	02 c0       	rjmp	.+4      	; 0x382 <Dio_ChannelWrite+0x32>
 37e:	22 0f       	add	r18, r18
 380:	33 1f       	adc	r19, r19
 382:	6a 95       	dec	r22
 384:	e2 f7       	brpl	.-8      	; 0x37e <Dio_ChannelWrite+0x2e>
 386:	24 2b       	or	r18, r20
 388:	20 83       	st	Z, r18
 38a:	08 95       	ret

0000038c <__itoa_ncheck>:
 38c:	bb 27       	eor	r27, r27
 38e:	4a 30       	cpi	r20, 0x0A	; 10
 390:	31 f4       	brne	.+12     	; 0x39e <__itoa_ncheck+0x12>
 392:	99 23       	and	r25, r25
 394:	22 f4       	brpl	.+8      	; 0x39e <__itoa_ncheck+0x12>
 396:	bd e2       	ldi	r27, 0x2D	; 45
 398:	90 95       	com	r25
 39a:	81 95       	neg	r24
 39c:	9f 4f       	sbci	r25, 0xFF	; 255
 39e:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__utoa_common>

000003a2 <__utoa_ncheck>:
 3a2:	bb 27       	eor	r27, r27

000003a4 <__utoa_common>:
 3a4:	fb 01       	movw	r30, r22
 3a6:	55 27       	eor	r21, r21
 3a8:	aa 27       	eor	r26, r26
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	aa 1f       	adc	r26, r26
 3b0:	a4 17       	cp	r26, r20
 3b2:	10 f0       	brcs	.+4      	; 0x3b8 <__utoa_common+0x14>
 3b4:	a4 1b       	sub	r26, r20
 3b6:	83 95       	inc	r24
 3b8:	50 51       	subi	r21, 0x10	; 16
 3ba:	b9 f7       	brne	.-18     	; 0x3aa <__utoa_common+0x6>
 3bc:	a0 5d       	subi	r26, 0xD0	; 208
 3be:	aa 33       	cpi	r26, 0x3A	; 58
 3c0:	08 f0       	brcs	.+2      	; 0x3c4 <__utoa_common+0x20>
 3c2:	a9 5d       	subi	r26, 0xD9	; 217
 3c4:	a1 93       	st	Z+, r26
 3c6:	00 97       	sbiw	r24, 0x00	; 0
 3c8:	79 f7       	brne	.-34     	; 0x3a8 <__utoa_common+0x4>
 3ca:	b1 11       	cpse	r27, r1
 3cc:	b1 93       	st	Z+, r27
 3ce:	11 92       	st	Z+, r1
 3d0:	cb 01       	movw	r24, r22
 3d2:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <strrev>

000003d6 <strrev>:
 3d6:	dc 01       	movw	r26, r24
 3d8:	fc 01       	movw	r30, r24
 3da:	67 2f       	mov	r22, r23
 3dc:	71 91       	ld	r23, Z+
 3de:	77 23       	and	r23, r23
 3e0:	e1 f7       	brne	.-8      	; 0x3da <strrev+0x4>
 3e2:	32 97       	sbiw	r30, 0x02	; 2
 3e4:	04 c0       	rjmp	.+8      	; 0x3ee <strrev+0x18>
 3e6:	7c 91       	ld	r23, X
 3e8:	6d 93       	st	X+, r22
 3ea:	70 83       	st	Z, r23
 3ec:	62 91       	ld	r22, -Z
 3ee:	ae 17       	cp	r26, r30
 3f0:	bf 07       	cpc	r27, r31
 3f2:	c8 f3       	brcs	.-14     	; 0x3e6 <strrev+0x10>
 3f4:	08 95       	ret

000003f6 <_exit>:
 3f6:	f8 94       	cli

000003f8 <__stop_program>:
 3f8:	ff cf       	rjmp	.-2      	; 0x3f8 <__stop_program>
